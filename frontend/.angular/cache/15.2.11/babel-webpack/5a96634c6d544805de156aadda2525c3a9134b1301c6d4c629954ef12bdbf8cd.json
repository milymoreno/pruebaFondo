{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ProductsComponent = class ProductsComponent {\n  constructor(productService) {\n    this.productService = productService;\n    this.products = [];\n    this.newProduct = {\n      id: 0,\n      name: '',\n      description: '',\n      price: 0,\n      quantity: 0,\n      images: [],\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n    this.selectedProduct = null;\n    this.selectedImage = null;\n    this.selectedImagePreviews = [];\n    this.selectedFiles = [];\n  }\n  ngOnInit() {\n    this.loadProducts();\n  }\n  loadProducts() {\n    this.productService.getProducts().subscribe(products => {\n      console.error('Lista de productos:', products);\n      this.products = products;\n    });\n  }\n  /*addProduct(): void {\r\n    const images: Image[] = [];\r\n    this.productService.createProduct(this.newProduct).subscribe(product => {\r\n      product.images = images;\r\n      console.log(this.newProduct);\r\n      console.log(JSON.stringify(this.newProduct, null, 2));\r\n      this.products.push(product);\r\n      this.resetNewProduct();\r\n      \r\n    });\r\n  }*/\n  addProduct() {\n    const formData = new FormData();\n    // Agregar los datos del producto al FormData\n    formData.append('name', this.newProduct.name);\n    formData.append('description', this.newProduct.description);\n    formData.append('price', this.newProduct.price.toString());\n    formData.append('quantity', this.newProduct.quantity.toString());\n    // Agregar las imágenes al FormData\n    for (let i = 0; i < this.selectedFiles.length; i++) {\n      formData.append('images[]', this.selectedFiles[i]);\n    }\n    this.productService.createProduct(formData).subscribe(response => {\n      console.log(response);\n      this.products.push(response);\n      this.resetNewProduct();\n    }, error => {\n      console.error('Error al agregar el producto:', error);\n    });\n  }\n  /*updateProduct(): void {\r\n    if (this.selectedProduct) {\r\n      this.productService.updateProduct(this.selectedProduct).subscribe(updatedProduct => {\r\n        const index = this.products.findIndex(p => p.id === updatedProduct.id);\r\n        if (index !== -1) {\r\n          this.products[index] = updatedProduct;\r\n        }\r\n        this.selectedProduct = null;\r\n      });\r\n    }\r\n  }*/\n  updateProduct() {\n    if (!this.selectedProduct) {\n      return;\n    }\n    const formData = new FormData();\n    formData.append('name', this.selectedProduct.name);\n    formData.append('description', this.selectedProduct.description);\n    formData.append('price', this.selectedProduct.price.toString());\n    formData.append('quantity', this.selectedProduct.quantity.toString());\n    for (let i = 0; i < this.selectedFiles.length; i++) {\n      formData.append('images[]', this.selectedFiles[i]);\n    }\n    this.productService.updateProduct(this.selectedProduct.id, formData).subscribe(response => {\n      const index = this.products.findIndex(p => p.id === this.selectedProduct.id);\n      this.products[index] = response;\n      this.resetNewProduct();\n    }, error => {\n      console.error('Error al actualizar el producto:', error);\n    });\n  }\n  deleteProduct(productId) {\n    this.productService.deleteProduct(productId).subscribe(() => {\n      this.products = this.products.filter(p => p.id !== productId);\n    });\n  }\n  selectProduct(product) {\n    this.selectedProduct = {\n      ...product\n    };\n    this.selectedImagePreviews = product.images.map(image => this.replacePublicWithStorage(image.path));\n  }\n  deleteImage(image) {\n    if (!this.selectedProduct) {\n      return;\n    }\n    this.productService.deleteImage(this.selectedProduct.id, image.id).subscribe(() => {\n      const index = this.selectedProduct.images.findIndex(img => img.id === image.id);\n      if (index !== -1) {\n        this.selectedProduct.images.splice(index, 1);\n        this.selectedImagePreviews.splice(index, 1);\n      }\n    }, error => {\n      console.error('Error al eliminar la imagen:', error);\n    });\n  }\n  resetNewProduct() {\n    this.newProduct = {\n      id: 0,\n      name: '',\n      description: '',\n      price: 0,\n      quantity: 0,\n      images: [],\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n    this.selectedFiles = [];\n    this.selectedImagePreviews = [];\n    // Opcional: Restablece el input de archivo\n    const fileInput = document.getElementById('fileInput');\n    if (fileInput) {\n      fileInput.value = '';\n    }\n  }\n  addImage(path) {\n    const image = {\n      id: 0,\n      path,\n      product_id: this.selectedProduct ? this.selectedProduct.id : this.newProduct.id,\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n    if (this.selectedProduct) {\n      this.selectedProduct.images.push(image);\n    } else {\n      this.newProduct.images.push(image);\n    }\n  }\n  removeImage(index) {\n    if (this.selectedProduct) {\n      this.selectedProduct.images.splice(index, 1);\n    } else {\n      this.newProduct.images.splice(index, 1);\n    }\n  }\n  // Función para reemplazar 'public' por 'storage' en las rutas de las imágenes\n  replacePublicWithStorage(imagePath) {\n    return imagePath.replace('public', 'http://localhost:8000/storage');\n  }\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.selectedImage = reader.result;\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n  onFilesSelected(event) {\n    const files = event.target.files;\n    if (files) {\n      this.selectedFiles = [];\n      this.selectedImagePreviews = [];\n      for (let i = 0; i < files.length; i++) {\n        this.selectedFiles.push(files[i]);\n        const imageUrl = URL.createObjectURL(files[i]);\n        this.selectedImagePreviews.push(imageUrl);\n      }\n    }\n  }\n};\nProductsComponent = __decorate([Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})], ProductsComponent);\nexport { ProductsComponent };","map":{"version":3,"mappings":"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","names":["Component","ProductsComponent","constructor","productService","id","name","description","price","quantity","images","created_at","Date","updated_at","ngOnInit","loadProducts","getProducts","subscribe","products","console","error","addProduct","formData","FormData","append","newProduct","toString","i","selectedFiles","length","createProduct","response","log","push","resetNewProduct","updateProduct","selectedProduct","index","findIndex","p","deleteProduct","productId","filter","selectProduct","product","selectedImagePreviews","map","image","replacePublicWithStorage","path","deleteImage","img","splice","fileInput","document","getElementById","value","addImage","product_id","removeImage","imagePath","replace","onFileSelected","event","file","target","files","reader","FileReader","onload","selectedImage","result","readAsDataURL","onFilesSelected","imageUrl","URL","createObjectURL","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\app_angular\\ecommerce-app\\src\\app\\products\\products.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Image, Product } from '../models/product.model';\nimport { ProductService } from '../services/product.service';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\nexport class ProductsComponent implements OnInit {\n  products: Product[] = [];\n  newProduct: Product = {\n    id: 0, // Inicialmente en 0, se debe asignar en el backend\n    name: '',\n    description: '',\n    price: 0,\n    quantity: 0,\n    images: [],\n    created_at: new Date(),\n    updated_at: new Date()\n  };\n  selectedProduct: Product | null = null;\n\n  selectedImage: string | ArrayBuffer | null = null;\n\n  selectedImagePreviews: string[] = [];\n\n  selectedFiles: File[] = [];\n\n\n  constructor(private productService: ProductService) { }\n\n  ngOnInit(): void {\n    this.loadProducts();\n  }\n\n  loadProducts(): void {\n    this.productService.getProducts().subscribe(products => {\n      console.error('Lista de productos:', products);\n      this.products = products;\n    });\n  }\n\n  /*addProduct(): void {\n    const images: Image[] = [];\n    this.productService.createProduct(this.newProduct).subscribe(product => {\n      product.images = images;\n      console.log(this.newProduct);\n      console.log(JSON.stringify(this.newProduct, null, 2));\n      this.products.push(product);\n      this.resetNewProduct();\n      \n    });\n  }*/\n  addProduct(): void {\n    const formData = new FormData();\n  \n    // Agregar los datos del producto al FormData\n    formData.append('name', this.newProduct.name);\n    formData.append('description', this.newProduct.description);\n    formData.append('price', this.newProduct.price.toString());\n    formData.append('quantity', this.newProduct.quantity.toString());\n  \n    // Agregar las imágenes al FormData\n    for (let i = 0; i < this.selectedFiles.length; i++) {\n      formData.append('images[]', this.selectedFiles[i]);\n    }\n  \n    this.productService.createProduct(formData).subscribe(\n      (response) => {\n        console.log(response);\n        this.products.push(response);\n        this.resetNewProduct();\n      },\n      (error) => {\n        console.error('Error al agregar el producto:', error);\n      }\n    );\n  }\n   \n  /*updateProduct(): void {\n    if (this.selectedProduct) {\n      this.productService.updateProduct(this.selectedProduct).subscribe(updatedProduct => {\n        const index = this.products.findIndex(p => p.id === updatedProduct.id);\n        if (index !== -1) {\n          this.products[index] = updatedProduct;\n        }\n        this.selectedProduct = null;\n      });\n    }\n  }*/\n\n  updateProduct(): void {\n    if (!this.selectedProduct) {\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('name', this.selectedProduct.name);\n    formData.append('description', this.selectedProduct.description);\n    formData.append('price', this.selectedProduct.price.toString());\n    formData.append('quantity', this.selectedProduct.quantity.toString());\n\n    for (let i = 0; i < this.selectedFiles.length; i++) {\n      formData.append('images[]', this.selectedFiles[i]);\n    }\n\n    this.productService.updateProduct(this.selectedProduct.id, formData).subscribe(\n      (response) => {\n        const index = this.products.findIndex(p => p.id === this.selectedProduct!.id);\n        this.products[index] = response;\n        this.resetNewProduct();\n      },\n      (error) => {\n        console.error('Error al actualizar el producto:', error);\n      }\n    );\n  }\n\n  deleteProduct(productId: number): void {\n    this.productService.deleteProduct(productId).subscribe(() => {\n      this.products = this.products.filter(p => p.id !== productId);\n    });\n  }\n\n  selectProduct(product: Product): void {\n    this.selectedProduct = { ...product };\n    this.selectedImagePreviews = product.images.map(image => this.replacePublicWithStorage(image.path));\n  }\n\n  deleteImage(image: Image): void {\n    if (!this.selectedProduct) {\n      return;\n    }\n\n    this.productService.deleteImage(this.selectedProduct.id, image.id).subscribe(\n      () => {\n        const index = this.selectedProduct!.images.findIndex(img => img.id === image.id);\n        if (index !== -1) {\n          this.selectedProduct!.images.splice(index, 1);\n          this.selectedImagePreviews.splice(index, 1);\n        }\n      },\n      (error) => {\n        console.error('Error al eliminar la imagen:', error);\n      }\n    );\n  }\n\n  resetNewProduct(): void {\n    this.newProduct = {\n      id: 0,\n      name: '',\n      description: '',\n      price: 0,\n      quantity: 0,\n      images: [],\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n    this.selectedFiles = [];\n    this.selectedImagePreviews = [];\n    // Opcional: Restablece el input de archivo\n    const fileInput = document.getElementById('fileInput') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.value = '';\n    }\n  }\n\n  addImage(path: string): void {\n    const image: Image = {\n      id: 0, // Inicialmente en 0, se debe asignar en el backend\n      path,\n      product_id: this.selectedProduct ? this.selectedProduct.id : this.newProduct.id,\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n    if (this.selectedProduct) {\n      this.selectedProduct.images.push(image);\n    } else {\n      this.newProduct.images.push(image);\n    }\n  }\n\n  removeImage(index: number): void {\n    if (this.selectedProduct) {\n      this.selectedProduct.images.splice(index, 1);\n    } else {\n      this.newProduct.images.splice(index, 1);\n    }\n  }\n  // Función para reemplazar 'public' por 'storage' en las rutas de las imágenes\n  replacePublicWithStorage(imagePath: string): string {\n    return imagePath.replace('public', 'http://localhost:8000/storage');\n  }\n   \n  onFileSelected(event: any) {\n    const file: File = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n      this.selectedImage = reader.result;\n    };\n    reader.readAsDataURL(file);\n    }\n  }\n   \n  onFilesSelected(event: any): void {\n    const files: FileList = event.target.files;\n    if (files) {\n      this.selectedFiles = [];\n      this.selectedImagePreviews = [];\n      for (let i = 0; i < files.length; i++) {\n        this.selectedFiles.push(files[i]);\n        const imageUrl = URL.createObjectURL(files[i]);\n        this.selectedImagePreviews.push(imageUrl);\n      }\n    }\n  }\n  \n\n \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}