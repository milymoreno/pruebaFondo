{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet OrdersComponent = class OrdersComponent {\n  constructor(orderService, productService, router) {\n    this.orderService = orderService;\n    this.productService = productService;\n    this.router = router;\n    this.orders = [];\n    this.newOrder = {\n      id: 0,\n      userId: 0,\n      deliveryAddress: '',\n      status: 'PENDING',\n      paymentMethod: 'CREDIT_CARD',\n      date: new Date(),\n      orderDetails: []\n    };\n    this.products = [];\n    this.selectedProduct = null;\n    this.quantity = 1;\n  } // Inyectar Router en el constructor\n  ngOnInit() {\n    this.loadOrders();\n    this.loadProducts();\n  }\n  loadOrders() {\n    this.orderService.getOrders().subscribe(orders => {\n      this.orders = orders;\n      // Cargar detalles completos del producto para cada OrderItem\n      this.loadOrderDetails();\n    });\n  }\n  /*mily*/\n  loadOrderDetails() {\n    for (const order of this.orders) {\n      for (const orderItem of order.orderDetails) {\n        this.productService.getProductById(orderItem.productId).subscribe(product => {\n          orderItem.product = product;\n        });\n      }\n    }\n  }\n  /*en mily*/\n  loadProducts() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n  addOrder() {\n    if (this.selectedProduct && this.selectedProduct.id !== undefined) {\n      const orderItem = {\n        productId: this.selectedProduct.id,\n        quantity: this.quantity,\n        price: this.selectedProduct.price\n      };\n      this.newOrder.orderDetails.push(orderItem);\n      this.orderService.createOrder(this.newOrder).subscribe(createdOrder => {\n        this.loadOrders();\n        this.newOrder = {\n          id: 0,\n          userId: 0,\n          deliveryAddress: '',\n          status: 'PENDING',\n          paymentMethod: 'CREDIT_CARD',\n          date: new Date(),\n          orderDetails: []\n        };\n        this.selectedProduct = null;\n        this.quantity = 1;\n      });\n    } else {\n      console.error('Selected product is invalid or undefined');\n    }\n  }\n  onSelectProduct(event) {\n    const selectElement = event.target;\n    const selectedIndex = parseInt(selectElement.value, 10);\n    if (!isNaN(selectedIndex) && this.products[selectedIndex]) {\n      this.selectedProduct = this.products[selectedIndex];\n    } else {\n      this.selectedProduct = null;\n    }\n  }\n  getProductById(productId) {\n    return this.products.find(product => product.id === productId);\n  }\n  editOrder(orderId) {\n    this.router.navigate(['/create-order', orderId]);\n  }\n};\nOrdersComponent = __decorate([Component({\n  selector: 'app-orders',\n  templateUrl: './orders.component.html',\n  styleUrls: ['./orders.component.css']\n})], OrdersComponent);\nexport { OrdersComponent };","map":{"version":3,"mappings":"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","names":["Component","OrdersComponent","constructor","orderService","productService","router","id","userId","deliveryAddress","status","paymentMethod","date","Date","orderDetails","ngOnInit","loadOrders","loadProducts","getOrders","subscribe","orders","loadOrderDetails","order","orderItem","getProductById","productId","product","getProducts","data","products","addOrder","selectedProduct","undefined","quantity","price","newOrder","push","createOrder","createdOrder","console","error","onSelectProduct","event","selectElement","target","selectedIndex","parseInt","value","isNaN","find","editOrder","orderId","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\app_angular\\ecommerce-app\\src\\app\\orders\\orders.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Order, OrderItem } from '../models/order.model';\nimport { Product } from '../models/product.model';\nimport { OrderService } from '../services/order.service';\nimport { ProductService } from '../services/product.service';\n\nimport { Router } from '@angular/router'; // Importar Router\n\n\n@Component({\n  selector: 'app-orders',\n  templateUrl: './orders.component.html',\n  styleUrls: ['./orders.component.css']\n})\nexport class OrdersComponent implements OnInit {\n  orders: Order[] = [];\n  newOrder: Order = {id:0, userId: 0, deliveryAddress: '', status: 'PENDING', paymentMethod: 'CREDIT_CARD', date: new Date(), orderDetails: [] };\n  products: Product[] = [];\n  selectedProduct: Product | null = null;\n  quantity: number = 1;\n\n  constructor(private orderService: OrderService, private productService: ProductService, private router: Router) { } // Inyectar Router en el constructor\n\n\n  ngOnInit(): void {\n    this.loadOrders();\n    this.loadProducts();\n  }\n\n  loadOrders(): void {\n    this.orderService.getOrders().subscribe(orders => {\n      this.orders = orders;\n      // Cargar detalles completos del producto para cada OrderItem\n      this.loadOrderDetails();\n    });\n  }\n  /*mily*/\n\n  loadOrderDetails(): void {\n    for (const order of this.orders) {\n      for (const orderItem of order.orderDetails) {\n        this.productService.getProductById(orderItem.productId).subscribe(product => {\n          orderItem.product = product;\n        });\n      }\n    }\n  }\n/*en mily*/\n  loadProducts(): void {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n\n  addOrder(): void {\n    if (this.selectedProduct && this.selectedProduct.id !== undefined) {\n      const orderItem: OrderItem = {\n        productId: this.selectedProduct.id,\n        quantity: this.quantity,\n        price: this.selectedProduct.price\n      };\n\n      this.newOrder.orderDetails.push(orderItem);\n\n      this.orderService.createOrder(this.newOrder).subscribe((createdOrder: Order) => {\n        this.loadOrders();\n        this.newOrder = { id:0, userId: 0, deliveryAddress: '', status: 'PENDING', paymentMethod: 'CREDIT_CARD', date: new Date(), orderDetails: [] };\n        this.selectedProduct = null;\n        this.quantity = 1;\n      });\n    } else {\n      console.error('Selected product is invalid or undefined');\n    }\n  }\n\n  onSelectProduct(event: Event): void {\n    const selectElement = event.target as HTMLSelectElement;\n    const selectedIndex = parseInt(selectElement.value, 10);\n    if (!isNaN(selectedIndex) && this.products[selectedIndex]) {\n      this.selectedProduct = this.products[selectedIndex];\n    } else {\n      this.selectedProduct = null;\n    }\n  }\n\n  getProductById(productId: number): Product | undefined {\n    return this.products.find(product => product.id === productId);\n  }\n\n  editOrder(orderId: number) {\n    this.router.navigate(['/create-order', orderId]);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}