{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/order.service\";\nimport * as i3 from \"../services/product.service\";\nexport class CreateOrderComponent {\n  constructor(fb, orderService, productService) {\n    this.fb = fb;\n    this.orderService = orderService;\n    this.productService = productService;\n    this.products = [];\n    this.product = {\n      id: 0,\n      name: 'product',\n      description: 'product',\n      price: 0,\n      quantity: 0,\n      images: [],\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n    this.orderForm = this.fb.group({\n      date: ['', Validators.required],\n      status: ['', Validators.required],\n      delivery_address: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      user_id: ['', Validators.required],\n      orderDetails: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n  get orderDetails() {\n    return this.orderForm.get('orderDetails');\n  }\n  addProduct() {\n    const orderDetailGroup = this.fb.group({\n      product_id: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.orderDetails.push(orderDetailGroup);\n  }\n  removeProduct(index) {\n    this.orderDetails.removeAt(index);\n  }\n  getProduct(productId) {\n    const product = this.products.find(product => product.id === productId);\n    console.log(`Product ID: ${productId}, Product:`, product);\n    return product;\n  }\n  getProductName(productId) {\n    const product = this.getProduct(productId);\n    return product ? product.name : 'Producto no encontrado';\n  }\n  getProductPrice(productId) {\n    const product = this.getProduct(productId);\n    return product ? product.price : 0;\n  }\n  /*onSubmit() {\r\n    if (this.orderForm.valid) {\r\n      const orderData: { order: Order; orderDetails: OrderItem[] } = { // Ajusta el tipo de orderData y orderDetails\r\n        order: {\r\n          date: this.orderForm.value.date,\r\n          status: this.orderForm.value.status,\r\n          deliveryAddress: this.orderForm.value.delivery_address,\r\n          paymentMethod: this.orderForm.value.payment_method,\r\n          userId: this.orderForm.value.user_id\r\n        },\r\n        orderDetails: this.orderForm.value.orderDetails.map((detail: any) => ({\r\n          productId: detail.product_id,\r\n          quantity: detail.quantity\r\n        }))\r\n      };\r\n          this.orderService.createOrder(orderData).subscribe(response => {\r\n        console.log('Order created', response);\r\n      });\r\n    }\r\n  }*/\n  onSubmit() {\n    if (this.orderForm.valid) {\n      const orderData = {\n        order: {\n          date: this.orderForm.value.date,\n          status: this.orderForm.value.status,\n          deliveryAddress: this.orderForm.value.delivery_address,\n          paymentMethod: this.orderForm.value.payment_method,\n          userId: this.orderForm.value.user_id\n        },\n        orderDetails: this.orderForm.value.orderDetails.map(detail => ({\n          productId: detail.product_id,\n          quantity: detail.quantity\n        }))\n      };\n      const jsonString = JSON.stringify(orderData);\n      console.log(jsonString); // Imprime el JSON generado en la consola\n      this.orderService.createOrder(jsonString).subscribe(response => {\n        console.log('Order created', response);\n      });\n      // Aquí puedes enviar el JSON al servicio OrderService si es necesario\n    }\n  }\n  static #_ = this.ɵfac = function CreateOrderComponent_Factory(t) {\n    return new (t || CreateOrderComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.OrderService), i0.ɵɵdirectiveInject(i3.ProductService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateOrderComponent,\n    selectors: [[\"app-create-order\"]],\n    decls: 0,\n    vars: 0,\n    template: function CreateOrderComponent_Template(rf, ctx) {},\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","CreateOrderComponent","constructor","fb","orderService","productService","id","name","description","price","quantity","images","created_at","Date","updated_at","orderForm","group","date","required","status","delivery_address","payment_method","user_id","orderDetails","array","ngOnInit","getProducts","subscribe","data","products","get","addProduct","orderDetailGroup","product_id","min","push","removeProduct","index","removeAt","getProduct","productId","product","find","console","log","getProductName","getProductPrice","onSubmit","valid","orderData","order","value","deliveryAddress","paymentMethod","userId","map","detail","jsonString","JSON","stringify","createOrder","response","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\app_angular\\ecommerce-app\\src\\app\\create-order\\create-order.component.ts"],"sourcesContent":["// src/app/create-order/create-order.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product } from '../models/product.model';\nimport { OrderService } from '../services/order.service';\nimport { ProductService } from '../services/product.service';\n\n@Component({\n  selector: 'app-create-order',\n  templateUrl: './create-order.component.html',\n  styleUrls: ['./create-order.component.css']\n})\nexport class CreateOrderComponent implements OnInit {\n  orderForm: FormGroup;\n  products: Product[] = [];\n  product: Product =  {\n    id: 0,\n    name: 'product',\n    description: 'product',\n    price: 0,\n    quantity: 0,\n    images: [],\n    created_at: new Date(),\n    updated_at: new Date(),\n  }; \n\n  constructor(\n    private fb: FormBuilder,\n    private orderService: OrderService,\n    private productService: ProductService\n  ) {\n    this.orderForm = this.fb.group({\n      date: ['', Validators.required],\n      status: ['', Validators.required],\n      delivery_address: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      user_id: ['', Validators.required],\n      orderDetails: this.fb.array([])\n    });\n  }\n\n  ngOnInit() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n\n  get orderDetails() {\n    return this.orderForm.get('orderDetails') as FormArray;\n  }\n\n  addProduct() {\n    const orderDetailGroup = this.fb.group({\n      product_id: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.orderDetails.push(orderDetailGroup);\n  }\n\n  removeProduct(index: number) {\n    this.orderDetails.removeAt(index);\n  }\n\n  getProduct(productId: number): Product | undefined {\n    const product = this.products.find(product => product.id === productId);\n    console.log(`Product ID: ${productId}, Product:`, product);\n    return product;\n  }\n\n  getProductName(productId: number): string {\n    const product = this.getProduct(productId);\n    return product ? product.name : 'Producto no encontrado';\n  }\n\n  getProductPrice(productId: number): number {\n    const product = this.getProduct(productId);\n    return product ? product.price : 0;\n  }\n\n  \n  \n  /*onSubmit() {\n    if (this.orderForm.valid) {\n      const orderData: { order: Order; orderDetails: OrderItem[] } = { // Ajusta el tipo de orderData y orderDetails     \n        order: {\n          date: this.orderForm.value.date,\n          status: this.orderForm.value.status,\n          deliveryAddress: this.orderForm.value.delivery_address,\n          paymentMethod: this.orderForm.value.payment_method,\n          userId: this.orderForm.value.user_id\n        },\n        orderDetails: this.orderForm.value.orderDetails.map((detail: any) => ({\n          productId: detail.product_id,\n          quantity: detail.quantity\n        }))\n      };\n\n      this.orderService.createOrder(orderData).subscribe(response => {\n        console.log('Order created', response);\n      });\n    }\n  }*/\n\n  onSubmit() {\n    if (this.orderForm.valid) {\n      const orderData = {\n        order: {\n          date: this.orderForm.value.date,\n          status: this.orderForm.value.status,\n          deliveryAddress: this.orderForm.value.delivery_address,\n          paymentMethod: this.orderForm.value.payment_method,\n          userId: this.orderForm.value.user_id\n        },\n        orderDetails: this.orderForm.value.orderDetails.map((detail: any) => ({\n          productId: detail.product_id,\n          quantity: detail.quantity\n        }))\n      };\n\n      const jsonString = JSON.stringify(orderData);\n      console.log(jsonString); // Imprime el JSON generado en la consola\n\n      this.orderService.createOrder(jsonString).subscribe(response => {\n        console.log('Order created', response);\n      });\n\n      // Aquí puedes enviar el JSON al servicio OrderService si es necesario\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}