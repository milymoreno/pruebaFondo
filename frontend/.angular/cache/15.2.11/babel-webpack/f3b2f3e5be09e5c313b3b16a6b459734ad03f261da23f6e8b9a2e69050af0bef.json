{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/create-order/create-order.component.ts\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet CreateOrderComponent = class CreateOrderComponent {\n  constructor(fb, orderService, productService) {\n    this.fb = fb;\n    this.orderService = orderService;\n    this.productService = productService;\n    this.products = [];\n    this.orderForm = this.fb.group({\n      date: ['', Validators.required],\n      status: ['', Validators.required],\n      delivery_address: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      user_id: ['', Validators.required],\n      orderDetails: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n  get orderDetails() {\n    return this.orderForm.get('orderDetails');\n  }\n  addProduct() {\n    const orderDetailGroup = this.fb.group({\n      product_id: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.orderDetails.push(orderDetailGroup);\n  }\n  removeProduct(index) {\n    this.orderDetails.removeAt(index);\n  }\n  getProduct(productId) {\n    return this.products.find(product => product.id === productId);\n  }\n  /*onSubmit() {\r\n    if (this.orderForm.valid) {\r\n      const orderData: { order: Order; orderDetails: OrderItem[] } = { // Ajusta el tipo de orderData y orderDetails\r\n        order: {\r\n          date: this.orderForm.value.date,\r\n          status: this.orderForm.value.status,\r\n          deliveryAddress: this.orderForm.value.delivery_address,\r\n          paymentMethod: this.orderForm.value.payment_method,\r\n          userId: this.orderForm.value.user_id\r\n        },\r\n        orderDetails: this.orderForm.value.orderDetails.map((detail: any) => ({\r\n          productId: detail.product_id,\r\n          quantity: detail.quantity\r\n        }))\r\n      };\r\n          this.orderService.createOrder(orderData).subscribe(response => {\r\n        console.log('Order created', response);\r\n      });\r\n    }\r\n  }*/\n  onSubmit() {\n    if (this.orderForm.valid) {\n      const orderData = {\n        order: {\n          date: this.orderForm.value.date,\n          status: this.orderForm.value.status,\n          deliveryAddress: this.orderForm.value.delivery_address,\n          paymentMethod: this.orderForm.value.payment_method,\n          userId: this.orderForm.value.user_id\n        },\n        orderDetails: this.orderForm.value.orderDetails.map(detail => ({\n          productId: detail.product_id,\n          quantity: detail.quantity\n        }))\n      };\n      const jsonString = JSON.stringify(orderData);\n      console.log(jsonString); // Imprime el JSON generado en la consola\n      this.orderService.createOrder(jsonString).subscribe(response => {\n        console.log('Order created', response);\n      });\n      // Aquí puedes enviar el JSON al servicio OrderService si es necesario\n    }\n  }\n};\n\nCreateOrderComponent = __decorate([Component({\n  selector: 'app-create-order',\n  templateUrl: './create-order.component.html',\n  styleUrls: ['./create-order.component.css']\n})], CreateOrderComponent);\nexport { CreateOrderComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","CreateOrderComponent","constructor","fb","orderService","productService","orderForm","group","date","required","status","delivery_address","payment_method","user_id","orderDetails","array","ngOnInit","getProducts","subscribe","data","products","get","addProduct","orderDetailGroup","product_id","quantity","min","push","removeProduct","index","removeAt","getProduct","productId","find","product","id","onSubmit","valid","orderData","order","value","deliveryAddress","paymentMethod","userId","map","detail","jsonString","JSON","stringify","console","log","createOrder","response","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\app_angular\\ecommerce-app\\src\\app\\create-order\\create-order.component.ts"],"sourcesContent":["// src/app/create-order/create-order.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product } from '../models/product.model';\nimport { OrderService } from '../services/order.service';\nimport { ProductService } from '../services/product.service';\n\n@Component({\n  selector: 'app-create-order',\n  templateUrl: './create-order.component.html',\n  styleUrls: ['./create-order.component.css']\n})\nexport class CreateOrderComponent implements OnInit {\n  orderForm: FormGroup;\n  products: Product[] = [];\n\n  constructor(\n    private fb: FormBuilder,\n    private orderService: OrderService,\n    private productService: ProductService\n  ) {\n    this.orderForm = this.fb.group({\n      date: ['', Validators.required],\n      status: ['', Validators.required],\n      delivery_address: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      user_id: ['', Validators.required],\n      orderDetails: this.fb.array([])\n    });\n  }\n\n  ngOnInit() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n\n  get orderDetails() {\n    return this.orderForm.get('orderDetails') as FormArray;\n  }\n\n  addProduct() {\n    const orderDetailGroup = this.fb.group({\n      product_id: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.orderDetails.push(orderDetailGroup);\n  }\n\n  removeProduct(index: number) {\n    this.orderDetails.removeAt(index);\n  }\n\n  getProduct(productId: number): Product | undefined {\n    return this.products.find(product => product.id === productId);\n  }\n\n \n  \n  /*onSubmit() {\n    if (this.orderForm.valid) {\n      const orderData: { order: Order; orderDetails: OrderItem[] } = { // Ajusta el tipo de orderData y orderDetails     \n        order: {\n          date: this.orderForm.value.date,\n          status: this.orderForm.value.status,\n          deliveryAddress: this.orderForm.value.delivery_address,\n          paymentMethod: this.orderForm.value.payment_method,\n          userId: this.orderForm.value.user_id\n        },\n        orderDetails: this.orderForm.value.orderDetails.map((detail: any) => ({\n          productId: detail.product_id,\n          quantity: detail.quantity\n        }))\n      };\n\n      this.orderService.createOrder(orderData).subscribe(response => {\n        console.log('Order created', response);\n      });\n    }\n  }*/\n\n  onSubmit() {\n    if (this.orderForm.valid) {\n      const orderData = {\n        order: {\n          date: this.orderForm.value.date,\n          status: this.orderForm.value.status,\n          deliveryAddress: this.orderForm.value.delivery_address,\n          paymentMethod: this.orderForm.value.payment_method,\n          userId: this.orderForm.value.user_id\n        },\n        orderDetails: this.orderForm.value.orderDetails.map((detail: any) => ({\n          productId: detail.product_id,\n          quantity: detail.quantity\n        }))\n      };\n\n      const jsonString = JSON.stringify(orderData);\n      console.log(jsonString); // Imprime el JSON generado en la consola\n\n      this.orderService.createOrder(jsonString).subscribe(response => {\n        console.log('Order created', response);\n      });\n\n      // Aquí puedes enviar el JSON al servicio OrderService si es necesario\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}