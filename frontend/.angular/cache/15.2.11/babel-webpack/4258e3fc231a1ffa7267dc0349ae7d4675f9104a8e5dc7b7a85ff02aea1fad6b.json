{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/order.service\";\nimport * as i3 from \"../services/product.service\";\nimport * as i4 from \"@angular/common\";\nfunction CreateOrderComponent_div_22_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const product_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", product_r5.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(product_r5.name);\n  }\n}\nfunction CreateOrderComponent_div_22_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const detail_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Nombre: \", ctx_r4.getProductName(detail_r1.value.product_id), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Precio: \", ctx_r4.getProductPrice(detail_r1.value.product_id), \"\");\n  }\n}\nfunction CreateOrderComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"label\", 16);\n    i0.ɵɵtext(2, \"Producto:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"select\", 17);\n    i0.ɵɵtemplate(4, CreateOrderComponent_div_22_option_4_Template, 2, 2, \"option\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"label\", 19);\n    i0.ɵɵtext(6, \"Cantidad:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 20);\n    i0.ɵɵelementStart(8, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function CreateOrderComponent_div_22_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const i_r2 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.removeProduct(i_r2));\n    });\n    i0.ɵɵtext(9, \"Eliminar\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, CreateOrderComponent_div_22_div_10_Template, 5, 2, \"div\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const detail_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", i_r2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.products);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.getProduct(detail_r1.value.product_id));\n  }\n}\nexport class CreateOrderComponent {\n  constructor(fb, orderService, productService) {\n    this.fb = fb;\n    this.orderService = orderService;\n    this.productService = productService;\n    this.products = [];\n    this.product = {\n      id: 0,\n      name: 'product',\n      description: 'product',\n      price: 0,\n      quantity: 0,\n      images: [],\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n    this.orderForm = this.fb.group({\n      date: ['', Validators.required],\n      status: ['', Validators.required],\n      delivery_address: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      user_id: ['', Validators.required],\n      orderDetails: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n  get orderDetails() {\n    return this.orderForm.get('orderDetails');\n  }\n  addProduct() {\n    const orderDetailGroup = this.fb.group({\n      product_id: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.orderDetails.push(orderDetailGroup);\n  }\n  removeProduct(index) {\n    this.orderDetails.removeAt(index);\n  }\n  getProduct(productId) {\n    const product = this.products.find(product => product.id === productId);\n    console.log(`Product ID: ${productId}, Product:`, product);\n    return product;\n  }\n  getProductName(productId) {\n    const product = this.getProduct(productId);\n    return product ? product.name : 'Producto no encontrado';\n  }\n  getProductPrice(productId) {\n    const product = this.getProduct(productId);\n    return product ? product.price : 0;\n  }\n  /*onSubmit() {\r\n    if (this.orderForm.valid) {\r\n      const orderData: { order: Order; orderDetails: OrderItem[] } = { // Ajusta el tipo de orderData y orderDetails\r\n        order: {\r\n          date: this.orderForm.value.date,\r\n          status: this.orderForm.value.status,\r\n          deliveryAddress: this.orderForm.value.delivery_address,\r\n          paymentMethod: this.orderForm.value.payment_method,\r\n          userId: this.orderForm.value.user_id\r\n        },\r\n        orderDetails: this.orderForm.value.orderDetails.map((detail: any) => ({\r\n          productId: detail.product_id,\r\n          quantity: detail.quantity\r\n        }))\r\n      };\r\n          this.orderService.createOrder(orderData).subscribe(response => {\r\n        console.log('Order created', response);\r\n      });\r\n    }\r\n  }*/\n  onSubmit() {\n    if (this.orderForm.valid) {\n      const orderData = {\n        order: {\n          date: this.orderForm.value.date,\n          status: this.orderForm.value.status,\n          deliveryAddress: this.orderForm.value.delivery_address,\n          paymentMethod: this.orderForm.value.payment_method,\n          userId: this.orderForm.value.user_id\n        },\n        orderDetails: this.orderForm.value.orderDetails.map(detail => ({\n          productId: detail.product_id,\n          quantity: detail.quantity\n        }))\n      };\n      const jsonString = JSON.stringify(orderData);\n      console.log(jsonString); // Imprime el JSON generado en la consola\n      this.orderService.createOrder(jsonString).subscribe(response => {\n        console.log('Order created', response);\n      });\n      // Aquí puedes enviar el JSON al servicio OrderService si es necesario\n    }\n  }\n  static #_ = this.ɵfac = function CreateOrderComponent_Factory(t) {\n    return new (t || CreateOrderComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.OrderService), i0.ɵɵdirectiveInject(i3.ProductService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateOrderComponent,\n    selectors: [[\"app-create-order\"]],\n    decls: 27,\n    vars: 2,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"date\"], [\"type\", \"date\", \"formControlName\", \"date\", \"required\", \"\"], [\"for\", \"status\"], [\"type\", \"text\", \"formControlName\", \"status\", \"required\", \"\"], [\"for\", \"delivery_address\"], [\"type\", \"text\", \"formControlName\", \"delivery_address\", \"required\", \"\"], [\"for\", \"payment_method\"], [\"type\", \"text\", \"formControlName\", \"payment_method\", \"required\", \"\"], [\"for\", \"user_id\"], [\"type\", \"number\", \"formControlName\", \"user_id\", \"required\", \"\"], [\"formArrayName\", \"orderDetails\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"submit\"], [3, \"formGroupName\"], [\"for\", \"product_id\"], [\"formControlName\", \"product_id\", \"required\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"quantity\"], [\"type\", \"number\", \"formControlName\", \"quantity\", \"min\", \"1\", \"required\", \"\"], [4, \"ngIf\"], [3, \"value\"]],\n    template: function CreateOrderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateOrderComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\")(2, \"label\", 1);\n        i0.ɵɵtext(3, \"Fecha:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\")(6, \"label\", 3);\n        i0.ɵɵtext(7, \"Estado:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\")(10, \"label\", 5);\n        i0.ɵɵtext(11, \"Direcci\\u00F3n de Entrega:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\")(14, \"label\", 7);\n        i0.ɵɵtext(15, \"M\\u00E9todo de Pago:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\")(18, \"label\", 9);\n        i0.ɵɵtext(19, \"ID del Usuario:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 11);\n        i0.ɵɵtemplate(22, CreateOrderComponent_div_22_Template, 11, 3, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function CreateOrderComponent_Template_button_click_23_listener() {\n          return ctx.addProduct();\n        });\n        i0.ɵɵtext(24, \"Agregar Producto\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"button\", 14);\n        i0.ɵɵtext(26, \"Enviar Orden\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.orderForm);\n        i0.ɵɵadvance(22);\n        i0.ɵɵproperty(\"ngForOf\", ctx.orderDetails.controls);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.MinValidator, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","i0","CreateOrderComponent","constructor","fb","orderService","productService","id","name","description","price","quantity","images","created_at","Date","updated_at","orderForm","group","date","required","status","delivery_address","payment_method","user_id","orderDetails","array","ngOnInit","getProducts","subscribe","data","products","get","addProduct","orderDetailGroup","product_id","min","push","removeProduct","index","removeAt","getProduct","productId","product","find","console","log","getProductName","getProductPrice","onSubmit","valid","orderData","order","value","deliveryAddress","paymentMethod","userId","map","detail","jsonString","JSON","stringify","createOrder","response","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\app_angular\\ecommerce-app\\src\\app\\create-order\\create-order.component.ts","C:\\app_angular\\ecommerce-app\\src\\app\\create-order\\create-order.component.html"],"sourcesContent":["// src/app/create-order/create-order.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product } from '../models/product.model';\nimport { OrderService } from '../services/order.service';\nimport { ProductService } from '../services/product.service';\n\n@Component({\n  selector: 'app-create-order',\n  templateUrl: './create-order.component.html',\n  styleUrls: ['./create-order.component.css']\n})\nexport class CreateOrderComponent implements OnInit {\n  orderForm: FormGroup;\n  products: Product[] = [];\n  product: Product =  {\n    id: 0,\n    name: 'product',\n    description: 'product',\n    price: 0,\n    quantity: 0,\n    images: [],\n    created_at: new Date(),\n    updated_at: new Date(),\n  }; \n\n  constructor(\n    private fb: FormBuilder,\n    private orderService: OrderService,\n    private productService: ProductService\n  ) {\n    this.orderForm = this.fb.group({\n      date: ['', Validators.required],\n      status: ['', Validators.required],\n      delivery_address: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      user_id: ['', Validators.required],\n      orderDetails: this.fb.array([])\n    });\n  }\n\n  ngOnInit() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n\n  get orderDetails() {\n    return this.orderForm.get('orderDetails') as FormArray;\n  }\n\n  addProduct() {\n    const orderDetailGroup = this.fb.group({\n      product_id: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.orderDetails.push(orderDetailGroup);\n  }\n\n  removeProduct(index: number) {\n    this.orderDetails.removeAt(index);\n  }\n\n  getProduct(productId: number): Product | undefined {\n    const product = this.products.find(product => product.id === productId);\n    console.log(`Product ID: ${productId}, Product:`, product);\n    return product;\n  }\n\n  getProductName(productId: number): string {\n    const product = this.getProduct(productId);\n    return product ? product.name : 'Producto no encontrado';\n  }\n\n  getProductPrice(productId: number): number {\n    const product = this.getProduct(productId);\n    return product ? product.price : 0;\n  }\n\n  \n  \n  /*onSubmit() {\n    if (this.orderForm.valid) {\n      const orderData: { order: Order; orderDetails: OrderItem[] } = { // Ajusta el tipo de orderData y orderDetails     \n        order: {\n          date: this.orderForm.value.date,\n          status: this.orderForm.value.status,\n          deliveryAddress: this.orderForm.value.delivery_address,\n          paymentMethod: this.orderForm.value.payment_method,\n          userId: this.orderForm.value.user_id\n        },\n        orderDetails: this.orderForm.value.orderDetails.map((detail: any) => ({\n          productId: detail.product_id,\n          quantity: detail.quantity\n        }))\n      };\n\n      this.orderService.createOrder(orderData).subscribe(response => {\n        console.log('Order created', response);\n      });\n    }\n  }*/\n\n  onSubmit() {\n    if (this.orderForm.valid) {\n      const orderData = {\n        order: {\n          date: this.orderForm.value.date,\n          status: this.orderForm.value.status,\n          deliveryAddress: this.orderForm.value.delivery_address,\n          paymentMethod: this.orderForm.value.payment_method,\n          userId: this.orderForm.value.user_id\n        },\n        orderDetails: this.orderForm.value.orderDetails.map((detail: any) => ({\n          productId: detail.product_id,\n          quantity: detail.quantity\n        }))\n      };\n\n      const jsonString = JSON.stringify(orderData);\n      console.log(jsonString); // Imprime el JSON generado en la consola\n\n      this.orderService.createOrder(jsonString).subscribe(response => {\n        console.log('Order created', response);\n      });\n\n      // Aquí puedes enviar el JSON al servicio OrderService si es necesario\n    }\n  }\n\n}","<form [formGroup]=\"orderForm\" (ngSubmit)=\"onSubmit()\">\n    <!-- Cabecera de la orden -->\n    <div>\n      <label for=\"date\">Fecha:</label>\n      <input type=\"date\" formControlName=\"date\" required>\n    </div>\n    <div>\n      <label for=\"status\">Estado:</label>\n      <input type=\"text\" formControlName=\"status\" required>\n    </div>\n    <div>\n      <label for=\"delivery_address\">Dirección de Entrega:</label>\n      <input type=\"text\" formControlName=\"delivery_address\" required>\n    </div>\n    <div>\n      <label for=\"payment_method\">Método de Pago:</label>\n      <input type=\"text\" formControlName=\"payment_method\" required>\n    </div>\n    <div>\n      <label for=\"user_id\">ID del Usuario:</label>\n      <input type=\"number\" formControlName=\"user_id\" required>\n    </div>\n    \n    <!-- Detalles de la orden -->\n    <div formArrayName=\"orderDetails\">\n      <div *ngFor=\"let detail of orderDetails.controls; let i = index\" [formGroupName]=\"i\">\n        <label for=\"product_id\">Producto:</label>\n        <select formControlName=\"product_id\" required>\n          <option *ngFor=\"let product of products\" [value]=\"product.id\">{{ product.name }}</option>\n        </select>\n  \n        <label for=\"quantity\">Cantidad:</label>\n        <input type=\"number\" formControlName=\"quantity\" min=\"1\" required>\n        \n        <button type=\"button\" (click)=\"removeProduct(i)\">Eliminar</button>\n  \n        <!-- Vista previa de los detalles del producto -->\n        <div *ngIf=\"getProduct(detail.value.product_id)\">\n          <p>Nombre: {{ getProductName(detail.value.product_id) }}</p>\n          <p>Precio: {{ getProductPrice(detail.value.product_id)}}</p>\n        </div>\n      </div>\n    </div>\n  \n    <button type=\"button\" (click)=\"addProduct()\">Agregar Producto</button>\n    <button type=\"submit\">Enviar Orden</button>\n  </form>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}