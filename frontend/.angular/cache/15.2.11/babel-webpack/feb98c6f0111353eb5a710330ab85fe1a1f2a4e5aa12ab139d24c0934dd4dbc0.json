{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrderService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8082/orders'; // URL del endpoint del servidor para manejar las órdenes Java\n  }\n\n  getOrders() {\n    return this.http.get(`${this.apiUrl}`);\n  }\n  /*createOrder(order: Order): Observable<Order> {\r\n    return this.http.post<Order>(`${this.apiUrl}/create`, order);\r\n  }*/\n  /*createOrder(order: any): Observable<any> {\r\n    return this.http.post<Order>(`${this.apiUrl}/create`, order);\r\n  }*/\n  createOrder(orderData) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(`${this.apiUrl}/create`, orderData, httpOptions);\n  }\n  updateOrder(orderId, orderData) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.put(`${this.apiUrl}/update/${orderId}`, orderData, httpOptions);\n  }\n  deleteOrder(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static #_ = this.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAQ9D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,8BAA8B,CAAC,CAAC;EAET;;EAExCC,SAAS;IACP,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAU,GAAG,IAAI,CAACC,MAAM,EAAE,CAAC;EACjD;EAEA;;;EAIA;;;EAIAC,WAAW,CAACC,SAAc;IACtB,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIV,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;IAED,OAAO,IAAI,CAACG,IAAI,CAACQ,IAAI,CAAQ,GAAG,IAAI,CAACL,MAAM,SAAS,EAAEE,SAAS,EAAEC,WAAW,CAAC;EACjF;EAEAG,WAAW,CAACC,OAAe,EAAEL,SAAc;IACzC,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIV,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;IAED,OAAO,IAAI,CAACG,IAAI,CAACW,GAAG,CAAQ,GAAG,IAAI,CAACR,MAAM,WAAWO,OAAO,EAAE,EAAEL,SAAS,EAAEC,WAAW,CAAC;EACzF;EAGAM,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAACb,IAAI,CAACc,MAAM,CAAO,GAAG,IAAI,CAACX,MAAM,IAAIU,EAAE,EAAE,CAAC;EACvD;EAAC;qBAxCUf,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAiB,SAAZjB,YAAY;IAAAkB,YAFX;EAAM","names":["HttpHeaders","OrderService","constructor","http","getOrders","get","apiUrl","createOrder","orderData","httpOptions","headers","post","updateOrder","orderId","put","deleteOrder","id","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\app_angular\\ecommerce-app\\src\\app\\services\\order.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Order } from '../models/order.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  private apiUrl = 'http://localhost:8082/orders'; // URL del endpoint del servidor para manejar las órdenes Java\n\n  constructor(private http: HttpClient) { }\n\n  getOrders(): Observable<Order[]> {\n    return this.http.get<Order[]>(`${this.apiUrl}`);\n  }\n\n  /*createOrder(order: Order): Observable<Order> {\n    return this.http.post<Order>(`${this.apiUrl}/create`, order);\n  }*/\n\n  /*createOrder(order: any): Observable<any> {\n    return this.http.post<Order>(`${this.apiUrl}/create`, order);\n  }*/\n    \n  createOrder(orderData: any): Observable<Order> {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n  \n      return this.http.post<Order>(`${this.apiUrl}/create`, orderData, httpOptions);\n  }\n\n  updateOrder(orderId: number, orderData: any): Observable<Order> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n\n    return this.http.put<Order>(`${this.apiUrl}/update/${orderId}`, orderData, httpOptions);\n  }\n\n\n  deleteOrder(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}