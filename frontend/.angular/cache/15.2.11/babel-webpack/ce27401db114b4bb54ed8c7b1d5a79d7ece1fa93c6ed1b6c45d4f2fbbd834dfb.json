{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/order.service\";\nimport * as i2 from \"../services/product.service\";\nexport class OrdersComponent {\n  constructor(orderService, productService) {\n    this.orderService = orderService;\n    this.productService = productService;\n    this.orders = [];\n    this.products = [];\n    this.newOrder = {\n      userId: '',\n      deliveryAddresss: '',\n      status: '',\n      paymentMethod: '',\n      total: 0,\n      orderDetails: []\n    };\n  }\n  ngOnInit() {\n    this.loadOrders();\n    this.loadProducts();\n  }\n  loadOrders() {\n    this.orderService.getOrders().subscribe(data => {\n      this.orders = data;\n    });\n  }\n  loadProducts() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n  addOrder() {\n    this.newOrder.total = this.calculateTotal(this.newOrder.orderDetails);\n    this.orderService.createOrder(this.newOrder).subscribe(() => {\n      this.loadOrders();\n    });\n  }\n  updateOrder(id) {\n    this.newOrder.total = this.calculateTotal(this.newOrder.orderDetails);\n    this.orderService.updateOrder(id, this.newOrder).subscribe(() => {\n      this.loadOrders();\n    });\n  }\n  deleteOrder(id) {\n    this.orderService.deleteOrder(id).subscribe(() => {\n      this.loadOrders();\n    });\n  }\n  editOrder(order) {\n    this.newOrder = {\n      ...order\n    };\n  }\n  calculateTotal(items) {\n    return items.reduce((total, item) => total + item.price * item.quantity, 0);\n  }\n  static #_ = this.ɵfac = function OrdersComponent_Factory(t) {\n    return new (t || OrdersComponent)(i0.ɵɵdirectiveInject(i1.OrderService), i0.ɵɵdirectiveInject(i2.ProductService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OrdersComponent,\n    selectors: [[\"app-orders\"]],\n    decls: 2,\n    vars: 0,\n    template: function OrdersComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"orders works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;;AAWA,OAAM,MAAOA,eAAe;EAY1BC,YAAoBC,YAA0B,EAAUC,cAA8B;IAAlE,iBAAY,GAAZD,YAAY;IAAwB,mBAAc,GAAdC,cAAc;IAXtE,WAAM,GAAY,EAAE;IACpB,aAAQ,GAAc,EAAE;IACxB,aAAQ,GAAU;MAChBC,MAAM,EAAE,EAAE;MACVC,gBAAgB,EAAE,EAAE;MACpBC,MAAM,EAAE,EAAE;MACVC,aAAa,EAAE,EAAE;MACjBC,KAAK,EAAE,CAAC;MACRC,YAAY,EAAE;KACf;EAEwF;EAEzFC,QAAQ;IACN,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAD,UAAU;IACR,IAAI,CAACT,YAAY,CAACW,SAAS,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MAC7C,IAAI,CAACC,MAAM,GAAGD,IAAI;IACpB,CAAC,CAAC;EACJ;EAEAH,YAAY;IACV,IAAI,CAACT,cAAc,CAACc,WAAW,EAAE,CAACH,SAAS,CAACC,IAAI,IAAG;MACjD,IAAI,CAACG,QAAQ,GAAGH,IAAI;IACtB,CAAC,CAAC;EACJ;EAEAI,QAAQ;IACN,IAAI,CAACC,QAAQ,CAACZ,KAAK,GAAG,IAAI,CAACa,cAAc,CAAC,IAAI,CAACD,QAAQ,CAACX,YAAY,CAAC;IACrE,IAAI,CAACP,YAAY,CAACoB,WAAW,CAAC,IAAI,CAACF,QAAQ,CAAC,CAACN,SAAS,CAAC,MAAK;MAC1D,IAAI,CAACH,UAAU,EAAE;IACnB,CAAC,CAAC;EACJ;EAEAY,WAAW,CAACC,EAAU;IACpB,IAAI,CAACJ,QAAQ,CAACZ,KAAK,GAAG,IAAI,CAACa,cAAc,CAAC,IAAI,CAACD,QAAQ,CAACX,YAAY,CAAC;IACrE,IAAI,CAACP,YAAY,CAACqB,WAAW,CAACC,EAAE,EAAE,IAAI,CAACJ,QAAQ,CAAC,CAACN,SAAS,CAAC,MAAK;MAC9D,IAAI,CAACH,UAAU,EAAE;IACnB,CAAC,CAAC;EACJ;EAEAc,WAAW,CAACD,EAAU;IACpB,IAAI,CAACtB,YAAY,CAACuB,WAAW,CAACD,EAAE,CAAC,CAACV,SAAS,CAAC,MAAK;MAC/C,IAAI,CAACH,UAAU,EAAE;IACnB,CAAC,CAAC;EACJ;EAEAe,SAAS,CAACC,KAAY;IACpB,IAAI,CAACP,QAAQ,GAAG;MAAE,GAAGO;IAAK,CAAE;EAC9B;EAEAN,cAAc,CAACO,KAAkB;IAC/B,OAAOA,KAAK,CAACC,MAAM,CAAC,CAACrB,KAAK,EAAEsB,IAAI,KAAKtB,KAAK,GAAGsB,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACE,QAAQ,EAAE,CAAC,CAAC;EAC7E;EAAC;qBAzDUhC,eAAe;EAAA;EAAA;UAAfA,eAAe;IAAAiC;IAAAC;IAAAC;IAAAC;MAAA;QCX5BC,yBAAG;QAAAA,6BAAa;QAAAA,iBAAI","names":["OrdersComponent","constructor","orderService","productService","userId","deliveryAddresss","status","paymentMethod","total","orderDetails","ngOnInit","loadOrders","loadProducts","getOrders","subscribe","data","orders","getProducts","products","addOrder","newOrder","calculateTotal","createOrder","updateOrder","id","deleteOrder","editOrder","order","items","reduce","item","price","quantity","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\app_angular\\ecommerce-app\\src\\app\\orders\\orders.component.ts","C:\\app_angular\\ecommerce-app\\src\\app\\orders\\orders.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Order, OrderItem } from '../models/order.model';\nimport { Product } from '../models/product.model';\nimport { OrderService } from '../services/order.service';\nimport { ProductService } from '../services/product.service';\n\n@Component({\n  selector: 'app-orders',\n  templateUrl: './orders.component.html',\n  styleUrls: ['./orders.component.css']\n})\nexport class OrdersComponent implements OnInit {\n  orders: Order[] = [];\n  products: Product[] = [];\n  newOrder: Order = {\n    userId: '',\n    deliveryAddresss: '',\n    status: '',\n    paymentMethod: '',\n    total: 0,\n    orderDetails: []\n  };\n\n  constructor(private orderService: OrderService, private productService: ProductService) {}\n\n  ngOnInit(): void {\n    this.loadOrders();\n    this.loadProducts();\n  }\n\n  loadOrders(): void {\n    this.orderService.getOrders().subscribe(data => {\n      this.orders = data;\n    });\n  }\n\n  loadProducts(): void {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n\n  addOrder(): void {\n    this.newOrder.total = this.calculateTotal(this.newOrder.orderDetails);\n    this.orderService.createOrder(this.newOrder).subscribe(() => {\n      this.loadOrders();\n    });\n  }\n\n  updateOrder(id: string): void {\n    this.newOrder.total = this.calculateTotal(this.newOrder.orderDetails);\n    this.orderService.updateOrder(id, this.newOrder).subscribe(() => {\n      this.loadOrders();\n    });\n  }\n\n  deleteOrder(id: string): void {\n    this.orderService.deleteOrder(id).subscribe(() => {\n      this.loadOrders();\n    });\n  }\n\n  editOrder(order: Order): void {\n    this.newOrder = { ...order };\n  }\n\n  calculateTotal(items: OrderItem[]): number {\n    return items.reduce((total, item) => total + item.price * item.quantity, 0);\n  }\n}\n","<p>orders works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}