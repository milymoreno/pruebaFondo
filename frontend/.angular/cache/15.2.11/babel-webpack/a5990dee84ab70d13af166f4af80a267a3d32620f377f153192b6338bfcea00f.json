{"ast":null,"code":"export class OrdersComponent {\n  constructor(orderService, productService) {\n    this.orderService = orderService;\n    this.productService = productService;\n    this.orders = [];\n    this.newOrder = {\n      userId: '',\n      deliveryAddress: '',\n      status: 'PENDING',\n      paymentMethod: 'CREDIT_CARD',\n      date: new Date(),\n      orderDetails: []\n    };\n    this.products = [];\n    this.selectedProduct = null;\n    this.quantity = 1;\n  }\n  ngOnInit() {\n    this.loadOrders();\n    this.loadProducts();\n  }\n  loadOrders() {\n    this.orderService.getOrders().subscribe(data => {\n      this.orders = data;\n    });\n  }\n  loadProducts() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n  addOrder() {\n    if (this.selectedProduct && this.selectedProduct._id !== undefined) {\n      const orderItem = {\n        productId: this.selectedProduct._id,\n        quantity: this.quantity,\n        price: this.selectedProduct.price\n      };\n      this.newOrder.orderDetails.push(orderItem);\n      this.orderService.createOrder(this.newOrder).subscribe(createdOrder => {\n        this.loadOrders();\n        this.newOrder = {\n          userId: '',\n          deliveryAddress: '',\n          status: 'PENDING',\n          paymentMethod: 'CREDIT_CARD',\n          date: new Date(),\n          orderDetails: []\n        };\n        this.selectedProduct = null;\n        this.quantity = 1;\n      });\n    } else {\n      console.error('Selected product is invalid or undefined');\n    }\n  }\n  onSelectProduct(product) {\n    this.selectedProduct = product;\n  }\n  getProductById(productId) {\n    return this.products.find(product => product._id === productId);\n  }\n}","map":{"version":3,"mappings":"AACA,OAAM,MAAOA,eAAe;EAO1BC,YAAoBC,YAA0B,EAAUC,cAA8B;IAAlE,iBAAY,GAAZD,YAAY;IAAwB,mBAAc,GAAdC,cAAc;IANtE,WAAM,GAAY,EAAE;IACpB,aAAQ,GAAU;MAAEC,MAAM,EAAE,EAAE;MAAEC,eAAe,EAAE,EAAE;MAAEC,MAAM,EAAE,SAAS;MAAEC,aAAa,EAAE,aAAa;MAAEC,IAAI,EAAE,IAAIC,IAAI,EAAE;MAAEC,YAAY,EAAE;IAAE,CAAE;IAC1I,aAAQ,GAAc,EAAE;IACxB,oBAAe,GAAmB,IAAI;IACtC,aAAQ,GAAW,CAAC;EAEsE;EAE1FC,QAAQ;IACN,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAD,UAAU;IACR,IAAI,CAACV,YAAY,CAACY,SAAS,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MAC7C,IAAI,CAACC,MAAM,GAAGD,IAAI;IACpB,CAAC,CAAC;EACJ;EAEAH,YAAY;IACV,IAAI,CAACV,cAAc,CAACe,WAAW,EAAE,CAACH,SAAS,CAACC,IAAI,IAAG;MACjD,IAAI,CAACG,QAAQ,GAAGH,IAAI;IACtB,CAAC,CAAC;EACJ;EAEAI,QAAQ;IACN,IAAI,IAAI,CAACC,eAAe,IAAI,IAAI,CAACA,eAAe,CAACC,GAAG,KAAKC,SAAS,EAAE;MAClE,MAAMC,SAAS,GAAc;QAC3BC,SAAS,EAAE,IAAI,CAACJ,eAAe,CAACC,GAAG;QACnCI,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBC,KAAK,EAAE,IAAI,CAACN,eAAe,CAACM;OAC7B;MAED,IAAI,CAACC,QAAQ,CAAClB,YAAY,CAACmB,IAAI,CAACL,SAAS,CAAC;MAE1C,IAAI,CAACtB,YAAY,CAAC4B,WAAW,CAAC,IAAI,CAACF,QAAQ,CAAC,CAACb,SAAS,CAAEgB,YAAmB,IAAI;QAC7E,IAAI,CAACnB,UAAU,EAAE;QACjB,IAAI,CAACgB,QAAQ,GAAG;UAAExB,MAAM,EAAE,EAAE;UAAEC,eAAe,EAAE,EAAE;UAAEC,MAAM,EAAE,SAAS;UAAEC,aAAa,EAAE,aAAa;UAAEC,IAAI,EAAE,IAAIC,IAAI,EAAE;UAAEC,YAAY,EAAE;QAAE,CAAE;QACxI,IAAI,CAACW,eAAe,GAAG,IAAI;QAC3B,IAAI,CAACK,QAAQ,GAAG,CAAC;MACnB,CAAC,CAAC;KACH,MAAM;MACLM,OAAO,CAACC,KAAK,CAAC,0CAA0C,CAAC;;EAE7D;EAEAC,eAAe,CAACC,OAAgB;IAC9B,IAAI,CAACd,eAAe,GAAGc,OAAO;EAChC;EAEAC,cAAc,CAACX,SAAiB;IAC9B,OAAO,IAAI,CAACN,QAAQ,CAACkB,IAAI,CAACF,OAAO,IAAIA,OAAO,CAACb,GAAG,KAAKG,SAAS,CAAC;EACjE","names":["OrdersComponent","constructor","orderService","productService","userId","deliveryAddress","status","paymentMethod","date","Date","orderDetails","ngOnInit","loadOrders","loadProducts","getOrders","subscribe","data","orders","getProducts","products","addOrder","selectedProduct","_id","undefined","orderItem","productId","quantity","price","newOrder","push","createOrder","createdOrder","console","error","onSelectProduct","product","getProductById","find"],"sourceRoot":"","sources":["C:\\app_angular\\ecommerce-app\\src\\app\\orders\\orders.component.ts"],"sourcesContent":["\nexport class OrdersComponent implements OnInit {\n  orders: Order[] = [];\n  newOrder: Order = { userId: '', deliveryAddress: '', status: 'PENDING', paymentMethod: 'CREDIT_CARD', date: new Date(), orderDetails: [] };\n  products: Product[] = [];\n  selectedProduct: Product | null = null;\n  quantity: number = 1;\n\n  constructor(private orderService: OrderService, private productService: ProductService) { }\n\n  ngOnInit(): void {\n    this.loadOrders();\n    this.loadProducts();\n  }\n\n  loadOrders(): void {\n    this.orderService.getOrders().subscribe(data => {\n      this.orders = data;\n    });\n  }\n\n  loadProducts(): void {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n\n  addOrder(): void {\n    if (this.selectedProduct && this.selectedProduct._id !== undefined) {\n      const orderItem: OrderItem = {\n        productId: this.selectedProduct._id,\n        quantity: this.quantity,\n        price: this.selectedProduct.price\n      };\n\n      this.newOrder.orderDetails.push(orderItem);\n\n      this.orderService.createOrder(this.newOrder).subscribe((createdOrder: Order) => {\n        this.loadOrders();\n        this.newOrder = { userId: '', deliveryAddress: '', status: 'PENDING', paymentMethod: 'CREDIT_CARD', date: new Date(), orderDetails: [] };\n        this.selectedProduct = null;\n        this.quantity = 1;\n      });\n    } else {\n      console.error('Selected product is invalid or undefined');\n    }\n  }\n\n  onSelectProduct(product: Product): void {\n    this.selectedProduct = product;\n  }\n\n  getProductById(productId: number): Product | undefined {\n    return this.products.find(product => product._id === productId);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}