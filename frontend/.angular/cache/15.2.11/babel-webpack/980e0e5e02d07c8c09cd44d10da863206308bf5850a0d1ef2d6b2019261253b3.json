{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet BuscarAsociarFondosComponent = class BuscarAsociarFondosComponent {\n  constructor(fondoService, clienteService, cliente) {\n    this.fondoService = fondoService;\n    this.clienteService = clienteService;\n    this.cliente = cliente;\n    /* */\n    this.fondosDisponibles = []; // Array para almacenar los fondos disponibles\n    this.numeroIdentificacion = '';\n  }\n  ngOnInit() {\n    this.getFondos(); // Llama al método getFondos() al iniciar el componente\n  }\n\n  getFondos() {\n    this.fondoService.getFondos().subscribe(fondos => {\n      this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n    }, error => {\n      console.error('Error al obtener los fondos:', error);\n      // Manejo de errores, si es necesario\n    });\n  }\n  /**/\n  buscarCliente() {\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n      this.cliente = response;\n      //this.obtenerFondosDisponibles();\n    });\n  }\n  /*obtenerFondosDisponibles() {\r\n    this.clienteService.obtenerFondosDisponibles().subscribe(data => {\r\n      this.fondosDisponibles = data.map(fondo => ({ ...fondo, selected: false }));\r\n    });\r\n  }*/\n  /*asociarFondos() {\r\n    const fondosSeleccionados = this.fondosDisponibles.filter(fondo => fondo.selected).map(fondo => ({\r\n      fondoId: fondo.id,\r\n      montoSuscrito: fondo.monto,\r\n      fechaSuscripcion: new Date().toISOString()\r\n    }));\r\n    this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(response => {\r\n      console.log('Fondos asociados', response);\r\n      this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\r\n    });\r\n  }*/\n  /* asociarFondos(): void {\r\n     const fondosSeleccionados = this.fondosDisponibles\r\n       .filter(fondo => fondo.selected)\r\n       .map(fondo => ({\r\n         fondoId: fondo.fondoId, // Accede a fondoId en lugar de id\r\n         montoSuscrito: fondo.montoSuscrito, // Accede a montoSuscrito en lugar de monto\r\n         fechaSuscripcion: new Date().toISOString()\r\n       }));\r\n   \r\n     this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\r\n       response => {\r\n         console.log('Fondos asociados', response);\r\n         this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\r\n       },\r\n       error => {\r\n         console.error('Error al asociar fondos:', error);\r\n         // Manejo de errores, si es necesario\r\n       }\r\n     );\r\n   }*/\n  /*asociarFondos(): void {\r\n    const fondosSeleccionados = this.fondosDisponibles\r\n      .filter(fondo => fondo.selected)\r\n      .map(fondo => ({\r\n        fondoId: fondo.fondoId,\r\n        montoSuscrito: fondo.montoSuscrito,\r\n        fechaSuscripcion: new Date().toISOString()\r\n      }));\r\n        this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\r\n      response => {\r\n        console.log('Fondos asociados:', response);\r\n            // Generar transacción\r\n        const transaccion: Transaccion = {\r\n          tipo: 'Asociación de fondos',\r\n          descripcion: 'Asociación de fondos a cliente',\r\n          monto: fondosSeleccionados.reduce((total, fondo) => total + fondo.montoSuscrito, 0),\r\n          fecha: new Date().toISOString()\r\n        };\r\n            this.clienteService.realizarTransaccion(this.cliente.id, transaccion).subscribe(\r\n          response => {\r\n            console.log('Transacción realizada:', response);\r\n            this.buscarCliente(); // Recargar los datos del cliente después de asociar fondos y transacción\r\n          },\r\n          error => {\r\n            console.error('Error al realizar transacción:', error);\r\n            // Manejo de errores, si es necesario\r\n          }\r\n        );\r\n          },\r\n      error => {\r\n        console.error('Error al asociar fondos:', error);\r\n        // Manejo de errores, si es necesario\r\n      }\r\n    );\r\n  }*/\n  asociarFondos() {\n    const fondosSeleccionados = this.fondosDisponibles.filter(fondo => fondo.selected).map(fondo => ({\n      fondoId: fondo.fondoId,\n      montoSuscrito: fondo.montoSuscrito,\n      fechaSuscripcion: new Date().toISOString()\n    }));\n    this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(response => {\n      console.log('Fondos asociados:', response);\n      // Generar transacción de tipo \"apertura\"\n      const transaccion = {\n        tipo: 'apertura',\n        descripcion: 'Apertura de fondos',\n        monto: fondosSeleccionados.reduce((total, fondo) => total - fondo.montoSuscrito, 0),\n        fecha: new Date().toISOString()\n      };\n      // Llamar al servicio para realizar la transacción\n      this.clienteService.realizarTransaccion(this.cliente.id, transaccion).subscribe(response => {\n        console.log('Transacción realizada:', response);\n        // Actualizar el cliente después de la transacción\n        this.clienteService.getCliente(this.cliente.id).subscribe(clienteActualizado => {\n          this.cliente = clienteActualizado;\n          console.log('Cliente actualizado:', this.cliente);\n        }, error => {\n          console.error('Error al obtener el cliente actualizado:', error);\n          // Manejo de errores, si es necesario\n        });\n      }, error => {\n        console.error('Error al realizar transacción:', error);\n        // Manejo de errores, si es necesario\n      });\n    }, error => {\n      console.error('Error al asociar fondos:', error);\n      // Manejo de errores, si es necesario\n    });\n  }\n};\n\nBuscarAsociarFondosComponent = __decorate([Component({\n  selector: 'app-buscar-asociar-fondos',\n  templateUrl: './buscar-asociar-fondos.component.html',\n  styleUrls: ['./buscar-asociar-fondos.component.css']\n})], BuscarAsociarFondosComponent);\nexport { BuscarAsociarFondosComponent };","map":{"version":3,"mappings":"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","names":["Component","BuscarAsociarFondosComponent","constructor","fondoService","clienteService","cliente","ngOnInit","getFondos","subscribe","fondos","fondosDisponibles","error","console","buscarCliente","buscarClientePorNumeroIdentificacion","numeroIdentificacion","response","asociarFondos","fondosSeleccionados","filter","fondo","selected","map","fondoId","montoSuscrito","fechaSuscripcion","Date","toISOString","id","log","transaccion","tipo","descripcion","monto","reduce","total","fecha","realizarTransaccion","getCliente","clienteActualizado","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\fondo\\frontend\\src\\app\\buscar-asociar-fondos\\buscar-asociar-fondos.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Fondo } from '../models/fondo.model'; // Asegúrate de importar la interfaz Fondo\nimport { ClienteService } from '../services/cliente.service';\nimport { FondoService } from '../services/fondo.service';\n\nimport { Cliente } from '../models/cliente.model';\nimport { Transaccion } from '../models/transaccion.model';\nimport { FondoSuscrito } from '../models/fondoSuscrito.model';\n\n\n@Component({\n  selector: 'app-buscar-asociar-fondos',\n  templateUrl: './buscar-asociar-fondos.component.html',\n  styleUrls: ['./buscar-asociar-fondos.component.css']\n})\nexport class BuscarAsociarFondosComponent {\n/* */\n\nfondosDisponibles: Fondo[] = []; // Array para almacenar los fondos disponibles\nnumeroIdentificacion: string = ''; \ncliente: Cliente;\n\nconstructor(\n  private fondoService: FondoService,\n  private clienteService: ClienteService,\n  private cliente: Cliente\n) { }\n\n  ngOnInit(): void {\n    this.getFondos(); // Llama al método getFondos() al iniciar el componente\n  }\n\n  getFondos(): void {\n    this.fondoService.getFondos().subscribe(\n      fondos => {\n        this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n      },\n      error => {\n        console.error('Error al obtener los fondos:', error);\n        // Manejo de errores, si es necesario\n      }\n    );\n  }\n\n\n\n  /**/\n \n  buscarCliente() {\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n      this.cliente = response;\n      //this.obtenerFondosDisponibles();\n    });\n  }\n\n  /*obtenerFondosDisponibles() {\n    this.clienteService.obtenerFondosDisponibles().subscribe(data => {\n      this.fondosDisponibles = data.map(fondo => ({ ...fondo, selected: false }));\n    });\n  }*/\n\n  /*asociarFondos() {\n    const fondosSeleccionados = this.fondosDisponibles.filter(fondo => fondo.selected).map(fondo => ({\n      fondoId: fondo.id,\n      montoSuscrito: fondo.monto,\n      fechaSuscripcion: new Date().toISOString()\n    }));\n    this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(response => {\n      console.log('Fondos asociados', response);\n      this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\n    });\n  }*/\n\n   /* asociarFondos(): void {\n      const fondosSeleccionados = this.fondosDisponibles\n        .filter(fondo => fondo.selected)\n        .map(fondo => ({\n          fondoId: fondo.fondoId, // Accede a fondoId en lugar de id\n          montoSuscrito: fondo.montoSuscrito, // Accede a montoSuscrito en lugar de monto\n          fechaSuscripcion: new Date().toISOString()\n        }));\n    \n      this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n        response => {\n          console.log('Fondos asociados', response);\n          this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\n        },\n        error => {\n          console.error('Error al asociar fondos:', error);\n          // Manejo de errores, si es necesario\n        }\n      );\n    }*/\n\n      /*asociarFondos(): void {\n        const fondosSeleccionados = this.fondosDisponibles\n          .filter(fondo => fondo.selected)\n          .map(fondo => ({\n            fondoId: fondo.fondoId,\n            montoSuscrito: fondo.montoSuscrito,\n            fechaSuscripcion: new Date().toISOString()\n          }));\n    \n        this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n          response => {\n            console.log('Fondos asociados:', response);\n    \n            // Generar transacción\n            const transaccion: Transaccion = {\n              tipo: 'Asociación de fondos',\n              descripcion: 'Asociación de fondos a cliente',\n              monto: fondosSeleccionados.reduce((total, fondo) => total + fondo.montoSuscrito, 0),\n              fecha: new Date().toISOString()\n            };\n    \n            this.clienteService.realizarTransaccion(this.cliente.id, transaccion).subscribe(\n              response => {\n                console.log('Transacción realizada:', response);\n                this.buscarCliente(); // Recargar los datos del cliente después de asociar fondos y transacción\n              },\n              error => {\n                console.error('Error al realizar transacción:', error);\n                // Manejo de errores, si es necesario\n              }\n            );\n    \n          },\n          error => {\n            console.error('Error al asociar fondos:', error);\n            // Manejo de errores, si es necesario\n          }\n        );\n      }*/\n\n\n        asociarFondos(): void {\n          const fondosSeleccionados = this.fondosDisponibles\n            .filter(fondo => fondo.selected)\n            .map(fondo => ({\n              fondoId: fondo.fondoId,\n              montoSuscrito: fondo.montoSuscrito,\n              fechaSuscripcion: new Date().toISOString()\n            }));\n      \n          this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n            response => {\n              console.log('Fondos asociados:', response);\n      \n              // Generar transacción de tipo \"apertura\"\n              const transaccion: Transaccion = {\n                tipo: 'apertura',\n                descripcion: 'Apertura de fondos',\n                monto: fondosSeleccionados.reduce((total, fondo) => total - fondo.montoSuscrito, 0),\n                fecha: new Date().toISOString()\n              };\n      \n              // Llamar al servicio para realizar la transacción\n              this.clienteService.realizarTransaccion(this.cliente.id, transaccion).subscribe(\n                response => {\n                  console.log('Transacción realizada:', response);\n      \n                  // Actualizar el cliente después de la transacción\n                  this.clienteService.getCliente(this.cliente.id).subscribe(\n                    (clienteActualizado: Cliente) => {\n                      this.cliente = clienteActualizado;\n                      console.log('Cliente actualizado:', this.cliente);\n                    },\n                    error => {\n                      console.error('Error al obtener el cliente actualizado:', error);\n                      // Manejo de errores, si es necesario\n                    }\n                  );\n      \n                },\n                error => {\n                  console.error('Error al realizar transacción:', error);\n                  // Manejo de errores, si es necesario\n                }\n              );\n      \n            },\n            error => {\n              console.error('Error al asociar fondos:', error);\n              // Manejo de errores, si es necesario\n            }\n          );\n        }\n  \n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}