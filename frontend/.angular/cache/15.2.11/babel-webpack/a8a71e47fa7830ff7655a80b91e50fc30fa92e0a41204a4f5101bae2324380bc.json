{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/fondo.service\";\nimport * as i2 from \"../services/cliente.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction BuscarAsociarFondosComponent_div_8_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"label\")(2, \"input\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function BuscarAsociarFondosComponent_div_8_div_24_Template_input_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const fondo_r3 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(fondo_r3.selected = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const fondo_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"name\", \"fondo\", fondo_r3.fondoId, \"\");\n    i0.ɵɵproperty(\"ngModel\", fondo_r3.selected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", fondo_r3.nombreFondo, \" - \", fondo_r3.montoSuscrito, \" \");\n  }\n}\nfunction BuscarAsociarFondosComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"h3\");\n    i0.ɵɵtext(2, \"Datos del Cliente\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\")(4, \"li\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"li\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"li\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"li\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"li\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"li\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"li\");\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(18, \" \\\"preferenciaNotificacion\\\": \");\n    i0.ɵɵelementStart(19, \"li\");\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(21, \"h3\");\n    i0.ɵɵtext(22, \"Fondos Disponibles para Suscribirse\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"form\", 0);\n    i0.ɵɵlistener(\"ngSubmit\", function BuscarAsociarFondosComponent_div_8_Template_form_ngSubmit_23_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.asociarFondos());\n    });\n    i0.ɵɵtemplate(24, BuscarAsociarFondosComponent_div_8_div_24_Template, 4, 4, \"div\", 7);\n    i0.ɵɵelementStart(25, \"button\", 3);\n    i0.ɵɵtext(26, \"Asociar Fondos Seleccionados\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"Tipo Identificaci\\u00F2n : \", ctx_r0.cliente.tipoIdentificacion, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"N\\u00F9mero Identificaci\\u00F2n: \", ctx_r0.cliente.numeroIdentificacion, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Nombres: \", ctx_r0.cliente.nombres, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Apellidos: \", ctx_r0.cliente.apellidos, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Email: \", ctx_r0.cliente.email, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Tel\\u00E9fono: \", ctx_r0.cliente.telefono, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Tel\\u00E9fono: \", ctx_r0.cliente.telefono, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Saldo Actual: \", ctx_r0.cliente.saldoActual, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.fondosDisponibles);\n  }\n}\nfunction BuscarAsociarFondosComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Cliente no encontrado.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class BuscarAsociarFondosComponent {\n  constructor(fondoService, clienteService) {\n    this.fondoService = fondoService;\n    this.clienteService = clienteService;\n    /* */\n    this.numeroIdentificacion = '';\n    this.fondosDisponibles = [];\n    this.cliente = {\n      id: '',\n      nombres: '',\n      apellidos: '',\n      tipoIdentificacion: '',\n      numeroIdentificacion: '',\n      email: '',\n      telefono: '',\n      saldoActual: 0,\n      fondosSuscritos: [],\n      historialTransacciones: [],\n      preferenciaNotificacion: ''\n    };\n  }\n  ngOnInit() {\n    this.getFondos(); // Llama al método getFondos() al iniciar el componente\n  }\n\n  getFondos() {\n    this.fondoService.getFondos().subscribe(fondos => {\n      this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n    }, error => {\n      console.error('Error al obtener los fondos:', error);\n      // Manejo de errores, si es necesario\n    });\n  }\n  /**/\n  buscarCliente() {\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n      this.cliente = response;\n    });\n  }\n  /*asociarFondos() {\r\n   const fondosSeleccionados = this.fondosDisponibles.filter(fondo => fondo.selected).map(fondo => ({\r\n     fondoId: fondo.id,\r\n     montoSuscrito: fondo.monto,\r\n     fechaSuscripcion: new Date().toISOString()\r\n   }));\r\n   this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(response => {\r\n     console.log('Fondos asociados', response);\r\n     this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\r\n   });\r\n  }*/\n  /* asociarFondos(): void {\r\n     const fondosSeleccionados = this.fondosDisponibles\r\n       .filter(fondo => fondo.selected)\r\n       .map(fondo => ({\r\n         fondoId: fondo.fondoId, // Accede a fondoId en lugar de id\r\n         montoSuscrito: fondo.montoSuscrito, // Accede a montoSuscrito en lugar de monto\r\n         fechaSuscripcion: new Date().toISOString()\r\n       }));\r\n   \r\n     this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\r\n       response => {\r\n         console.log('Fondos asociados', response);\r\n         this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\r\n       },\r\n       error => {\r\n         console.error('Error al asociar fondos:', error);\r\n         // Manejo de errores, si es necesario\r\n       }\r\n     );\r\n   }*/\n  /*asociarFondos(): void {\r\n    const fondosSeleccionados = this.fondosDisponibles\r\n      .filter(fondo => fondo.selected)\r\n      .map(fondo => ({\r\n        fondoId: fondo.fondoId,\r\n        montoSuscrito: fondo.montoSuscrito,\r\n        fechaSuscripcion: new Date().toISOString()\r\n      }));\r\n        this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\r\n      response => {\r\n        console.log('Fondos asociados:', response);\r\n            // Generar transacción\r\n        const transaccion: Transaccion = {\r\n          tipo: 'Asociación de fondos',\r\n          descripcion: 'Asociación de fondos a cliente',\r\n          monto: fondosSeleccionados.reduce((total, fondo) => total + fondo.montoSuscrito, 0),\r\n          fecha: new Date().toISOString()\r\n        };\r\n            this.clienteService.realizarTransaccion(this.cliente.id, transaccion).subscribe(\r\n          response => {\r\n            console.log('Transacción realizada:', response);\r\n            this.buscarCliente(); // Recargar los datos del cliente después de asociar fondos y transacción\r\n          },\r\n          error => {\r\n            console.error('Error al realizar transacción:', error);\r\n            // Manejo de errores, si es necesario\r\n          }\r\n        );\r\n          },\r\n      error => {\r\n        console.error('Error al asociar fondos:', error);\r\n        // Manejo de errores, si es necesario\r\n      }\r\n    );\r\n  }*/\n  asociarFondos() {\n    const fondosSeleccionados = this.fondosDisponibles.filter(fondo => fondo.selected).map(fondo => ({\n      fondoId: fondo.fondoId,\n      montoSuscrito: fondo.montoSuscrito,\n      fechaSuscripcion: new Date().toISOString()\n    }));\n    // Arreglo para almacenar las transacciones\n    const transacciones = [];\n    // Generar transacciones para cada fondo seleccionado\n    fondosSeleccionados.forEach((fondo, index) => {\n      const transaccion = {\n        tipo: 'apertura',\n        transactionId: 'id_transaccion',\n        monto: fondo.montoSuscrito,\n        fecha: new Date().toISOString(),\n        fondoId: fondo.fondoId\n      };\n      transacciones.push(transaccion);\n    });\n    // Llamar al servicio para asociar los fondos con las transacciones correspondientes\n    this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(response => {\n      console.log('Fondos asociados:', response);\n      // Llamar al servicio para realizar las transacciones\n      this.clienteService.realizarTransaccion(this.cliente.id, transacciones).subscribe(response => {\n        console.log('Transacciones realizadas:', response);\n        // Actualizar el cliente después de la transacción\n        this.clienteService.getCliente(this.cliente.id).subscribe(clienteActualizado => {\n          this.cliente = clienteActualizado;\n          console.log('Cliente actualizado:', this.cliente);\n        }, error => {\n          console.error('Error al obtener el cliente actualizado:', error);\n          // Manejo de errores, si es necesario\n        });\n      }, error => {\n        console.error('Error al realizar transacciones:', error);\n        // Manejo de errores, si es necesario\n      });\n    }, error => {\n      console.error('Error al asociar fondos:', error);\n      // Manejo de errores, si es necesario\n    });\n  }\n  static #_ = this.ɵfac = function BuscarAsociarFondosComponent_Factory(t) {\n    return new (t || BuscarAsociarFondosComponent)(i0.ɵɵdirectiveInject(i1.FondoService), i0.ɵɵdirectiveInject(i2.ClienteService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BuscarAsociarFondosComponent,\n    selectors: [[\"app-buscar-asociar-fondos\"]],\n    decls: 10,\n    vars: 3,\n    consts: [[3, \"ngSubmit\"], [\"for\", \"numeroIdentificacion\"], [\"id\", \"numeroIdentificacion\", \"name\", \"numeroIdentificacion\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [\"class\", \"container\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"container\"], [\"class\", \"content\", 4, \"ngFor\", \"ngForOf\"], [1, \"content\"], [\"type\", \"checkbox\", 3, \"ngModel\", \"name\", \"ngModelChange\"]],\n    template: function BuscarAsociarFondosComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Buscar Cliente y Asociar Fondos\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function BuscarAsociarFondosComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.buscarCliente();\n        });\n        i0.ɵɵelementStart(3, \"label\", 1);\n        i0.ɵɵtext(4, \"N\\u00FAmero de Identificaci\\u00F3n:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function BuscarAsociarFondosComponent_Template_input_ngModelChange_5_listener($event) {\n          return ctx.numeroIdentificacion = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 3);\n        i0.ɵɵtext(7, \"Buscar\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(8, BuscarAsociarFondosComponent_div_8_Template, 27, 9, \"div\", 4);\n        i0.ɵɵtemplate(9, BuscarAsociarFondosComponent_div_9_Template, 3, 0, \"div\", 5);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.numeroIdentificacion);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.cliente);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.cliente && ctx.cliente !== undefined);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.CheckboxControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm],\n    styles: [\".container[_ngcontent-%COMP%] {\\n    background-color: #f0f0f0;\\n    border: 1px solid #ccc;\\n    padding: 20px;\\n    margin: 10px;\\n  }\\n  \\n  .content[_ngcontent-%COMP%] {\\n    margin-top: 10px;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYnVzY2FyLWFzb2NpYXItZm9uZG9zL2J1c2Nhci1hc29jaWFyLWZvbmRvcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0kseUJBQXlCO0lBQ3pCLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2IsWUFBWTtFQUNkOztFQUVBO0lBQ0UsZ0JBQWdCO0VBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgbWFyZ2luOiAxMHB4O1xuICB9XG4gIFxuICAuY29udGVudCB7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgfVxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","BuscarAsociarFondosComponent","constructor","fondoService","clienteService","id","nombres","apellidos","tipoIdentificacion","numeroIdentificacion","email","telefono","saldoActual","fondosSuscritos","historialTransacciones","preferenciaNotificacion","ngOnInit","getFondos","subscribe","fondos","fondosDisponibles","error","console","buscarCliente","buscarClientePorNumeroIdentificacion","response","cliente","asociarFondos","fondosSeleccionados","filter","fondo","selected","map","fondoId","montoSuscrito","fechaSuscripcion","Date","toISOString","transacciones","forEach","index","transaccion","tipo","transactionId","monto","fecha","push","log","realizarTransaccion","getCliente","clienteActualizado","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\fondo\\frontend\\src\\app\\buscar-asociar-fondos\\buscar-asociar-fondos.component.html","C:\\fondo\\frontend\\src\\app\\buscar-asociar-fondos\\buscar-asociar-fondos.component.ts"],"sourcesContent":["<h2>Buscar Cliente y Asociar Fondos</h2>\n<form (ngSubmit)=\"buscarCliente()\">\n  <label for=\"numeroIdentificacion\">Número de Identificación:</label>\n  <input id=\"numeroIdentificacion\" [(ngModel)]=\"numeroIdentificacion\" name=\"numeroIdentificacion\" required>\n  <button type=\"submit\">Buscar</button>\n</form>\n\n<div *ngIf=\"cliente\" class=\"container\">\n  <h3>Datos del Cliente</h3>\n  <ul>  \n    <li>Tipo Identificaciòn : {{ cliente.tipoIdentificacion }}</li>\n    <li>Nùmero Identificaciòn: {{ cliente.numeroIdentificacion }}</li>\n    <li>Nombres: {{ cliente.nombres }}</li>\n    <li>Apellidos: {{ cliente.apellidos }}</li>\n    <li>Email: {{ cliente.email }}</li>\n    <li>Teléfono: {{ cliente.telefono }}</li>\n    <li>Teléfono: {{ cliente.telefono }}</li>\n    \"preferenciaNotificacion\":\n    <li>Saldo Actual: {{ cliente.saldoActual }}</li>\n  </ul>\n\n  <h3>Fondos Disponibles para Suscribirse</h3>\n  <form (ngSubmit)=\"asociarFondos()\">\n    <div *ngFor=\"let fondo of fondosDisponibles\" class=\"content\">\n      <label>\n        <input type=\"checkbox\" [(ngModel)]=\"fondo.selected\" name=\"fondo{{ fondo.fondoId }}\">\n        {{ fondo.nombreFondo }} - {{ fondo.montoSuscrito }}\n      </label>\n    </div>\n    <button type=\"submit\">Asociar Fondos Seleccionados</button>\n  </form>\n</div>\n\n<div *ngIf=\"!cliente && cliente !== undefined\">\n  <p>Cliente no encontrado.</p>\n</div>\n\n\n\n\n","import { Component } from '@angular/core';\nimport { Fondo } from '../models/fondo.model'; // Asegúrate de importar la interfaz Fondo\nimport { ClienteService } from '../services/cliente.service';\nimport { FondoService } from '../services/fondo.service';\n\nimport { Cliente } from '../models/cliente.model';\nimport { Transaccion } from '../models/transaccion.model';\nimport { FondoSuscrito } from '../models/fondoSuscrito.model';\n\n\n@Component({\n  selector: 'app-buscar-asociar-fondos',\n  templateUrl: './buscar-asociar-fondos.component.html',\n  styleUrls: ['./buscar-asociar-fondos.component.css']\n})\nexport class BuscarAsociarFondosComponent {\n/* */\nnumeroIdentificacion: string = ''; \nfondosDisponibles: Fondo[] = [];\ncliente: Cliente = {\n  id: '',\n  nombres: '',\n  apellidos: '',\n  tipoIdentificacion: '',\n  numeroIdentificacion: '',\n  email: '',\n  telefono: '',\n  saldoActual: 0,\n  fondosSuscritos: [],\n  historialTransacciones: [],\n  preferenciaNotificacion: ''\n};\n\nconstructor(\n  private fondoService: FondoService,\n  private clienteService: ClienteService,\n) { }\n\n  ngOnInit(): void {\n    this.getFondos(); // Llama al método getFondos() al iniciar el componente\n  }\n\n  getFondos(): void {\n    this.fondoService.getFondos().subscribe(\n      fondos => {\n        this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n      },\n      error => {\n        console.error('Error al obtener los fondos:', error);\n        // Manejo de errores, si es necesario\n      }\n    );\n  }\n\n\n\n  /**/\n \n  buscarCliente() {\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n      this.cliente = response;\n    });\n  }\n\n   /*asociarFondos() {\n    const fondosSeleccionados = this.fondosDisponibles.filter(fondo => fondo.selected).map(fondo => ({\n      fondoId: fondo.id,\n      montoSuscrito: fondo.monto,\n      fechaSuscripcion: new Date().toISOString()\n    }));\n    this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(response => {\n      console.log('Fondos asociados', response);\n      this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\n    });\n  }*/\n\n   /* asociarFondos(): void {\n      const fondosSeleccionados = this.fondosDisponibles\n        .filter(fondo => fondo.selected)\n        .map(fondo => ({\n          fondoId: fondo.fondoId, // Accede a fondoId en lugar de id\n          montoSuscrito: fondo.montoSuscrito, // Accede a montoSuscrito en lugar de monto\n          fechaSuscripcion: new Date().toISOString()\n        }));\n    \n      this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n        response => {\n          console.log('Fondos asociados', response);\n          this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\n        },\n        error => {\n          console.error('Error al asociar fondos:', error);\n          // Manejo de errores, si es necesario\n        }\n      );\n    }*/\n\n      /*asociarFondos(): void {\n        const fondosSeleccionados = this.fondosDisponibles\n          .filter(fondo => fondo.selected)\n          .map(fondo => ({\n            fondoId: fondo.fondoId,\n            montoSuscrito: fondo.montoSuscrito,\n            fechaSuscripcion: new Date().toISOString()\n          }));\n    \n        this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n          response => {\n            console.log('Fondos asociados:', response);\n    \n            // Generar transacción\n            const transaccion: Transaccion = {\n              tipo: 'Asociación de fondos',\n              descripcion: 'Asociación de fondos a cliente',\n              monto: fondosSeleccionados.reduce((total, fondo) => total + fondo.montoSuscrito, 0),\n              fecha: new Date().toISOString()\n            };\n    \n            this.clienteService.realizarTransaccion(this.cliente.id, transaccion).subscribe(\n              response => {\n                console.log('Transacción realizada:', response);\n                this.buscarCliente(); // Recargar los datos del cliente después de asociar fondos y transacción\n              },\n              error => {\n                console.error('Error al realizar transacción:', error);\n                // Manejo de errores, si es necesario\n              }\n            );\n    \n          },\n          error => {\n            console.error('Error al asociar fondos:', error);\n            // Manejo de errores, si es necesario\n          }\n        );\n      }*/\n        asociarFondos(): void {\n          const fondosSeleccionados: any[] = this.fondosDisponibles\n            .filter(fondo => fondo.selected)\n            .map(fondo => ({\n              fondoId: fondo.fondoId,\n              montoSuscrito: fondo.montoSuscrito,\n              fechaSuscripcion: new Date().toISOString()\n            }));\n        \n          // Arreglo para almacenar las transacciones\n          const transacciones: Transaccion[] = [];\n        \n          // Generar transacciones para cada fondo seleccionado\n          fondosSeleccionados.forEach((fondo, index) => {\n            const transaccion: Transaccion = {\n              tipo: 'apertura',\n              transactionId: 'id_transaccion',\n              monto: fondo.montoSuscrito,\n              fecha: new Date().toISOString(),\n              fondoId: fondo.fondoId\n            };\n            transacciones.push(transaccion);\n          });\n        \n          // Llamar al servicio para asociar los fondos con las transacciones correspondientes\n          this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n            response => {\n              console.log('Fondos asociados:', response);\n        \n              // Llamar al servicio para realizar las transacciones\n              this.clienteService.realizarTransaccion(this.cliente.id, transacciones).subscribe(\n                response => {\n                  console.log('Transacciones realizadas:', response);\n        \n                  // Actualizar el cliente después de la transacción\n                  this.clienteService.getCliente(this.cliente.id).subscribe(\n                    (clienteActualizado: Cliente) => {\n                      this.cliente = clienteActualizado;\n                      console.log('Cliente actualizado:', this.cliente);\n                    },\n                    error => {\n                      console.error('Error al obtener el cliente actualizado:', error);\n                      // Manejo de errores, si es necesario\n                    }\n                  );\n                },\n                error => {\n                  console.error('Error al realizar transacciones:', error);\n                  // Manejo de errores, si es necesario\n                }\n              );\n            },\n            error => {\n              console.error('Error al asociar fondos:', error);\n              // Manejo de errores, si es necesario\n            }\n          );\n        }\n        \n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}