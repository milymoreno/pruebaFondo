{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet CreateOrderComponent = class CreateOrderComponent {\n  constructor(fb, route, router, orderService, productService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.orderService = orderService;\n    this.productService = productService;\n    this.products = [];\n    this.isEditMode = false;\n    this.orderId = null;\n    this.orderForm = this.fb.group({\n      date: ['', Validators.required],\n      status: ['', Validators.required],\n      delivery_address: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      user_id: ['', Validators.required],\n      orderDetails: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n    this.route.paramMap.subscribe(params => {\n      this.orderId = Number(params.get('id'));\n      this.isEditMode = !!this.orderId;\n      if (this.isEditMode && this.orderId) {\n        this.loadOrder(this.orderId);\n      }\n    });\n  }\n  get orderDetails() {\n    return this.orderForm.get('orderDetails');\n  }\n  addProduct() {\n    const orderDetailGroup = this.fb.group({\n      product_id: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.orderDetails.push(orderDetailGroup);\n  }\n  removeProduct(index) {\n    this.orderDetails.removeAt(index);\n  }\n  getProduct(productId) {\n    const product = this.products.find(product => product.id === productId);\n    console.log(`Product ID: ${productId}, Product:`, product); // Debugging line\n    return product;\n  }\n  getProductById(productId) {\n    return this.products.find(product => product.id === productId);\n  }\n  getProductName(productId) {\n    const product = this.getProduct(productId);\n    return product ? product.name : 'Producto no encontrado';\n  }\n  getProductPrice(productId) {\n    const product = this.getProduct(productId);\n    return product ? product.price : 0;\n  }\n  loadOrder(orderId) {\n    this.orderService.getOrderById(orderId).subscribe(order => {\n      this.orderForm.patchValue({\n        date: order.date,\n        status: order.status,\n        delivery_address: order.deliveryAddress,\n        payment_method: order.paymentMethod,\n        user_id: order.userId\n      });\n      order.orderDetails.forEach(detail => {\n        this.orderDetails.push(this.fb.group({\n          product_id: [detail.productId, Validators.required],\n          quantity: [detail.quantity, [Validators.required, Validators.min(1)]]\n        }));\n      });\n    });\n  }\n  onSubmit() {\n    if (this.orderForm.valid) {\n      const orderData = {\n        order: {\n          date: this.orderForm.value.date,\n          status: this.orderForm.value.status,\n          deliveryAddress: this.orderForm.value.delivery_address,\n          paymentMethod: this.orderForm.value.payment_method,\n          userId: this.orderForm.value.user_id\n        },\n        orderDetails: this.orderForm.value.orderDetails.map(detail => ({\n          productId: detail.product_id,\n          quantity: detail.quantity\n        }))\n      };\n      if (this.isEditMode && this.orderId) {\n        this.orderService.updateOrder(this.orderId, orderData).subscribe(response => {\n          console.log('Order updated', response);\n          this.router.navigate(['/orders']);\n        });\n      } else {\n        this.orderService.createOrder(orderData).subscribe(response => {\n          console.log('Order created', response);\n          this.router.navigate(['/orders']);\n        });\n      }\n    }\n  }\n};\nCreateOrderComponent = __decorate([Component({\n  selector: 'app-create-order',\n  templateUrl: './create-order.component.html',\n  styleUrls: ['./create-order.component.css']\n})], CreateOrderComponent);\nexport { CreateOrderComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","CreateOrderComponent","constructor","fb","route","router","orderService","productService","orderForm","group","date","required","status","delivery_address","payment_method","user_id","orderDetails","array","ngOnInit","getProducts","subscribe","data","products","paramMap","params","orderId","Number","get","isEditMode","loadOrder","addProduct","orderDetailGroup","product_id","quantity","min","push","removeProduct","index","removeAt","getProduct","productId","product","find","id","console","log","getProductById","getProductName","name","getProductPrice","price","getOrderById","order","patchValue","deliveryAddress","paymentMethod","userId","forEach","detail","onSubmit","valid","orderData","value","map","updateOrder","response","navigate","createOrder","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\app_angular\\ecommerce-app\\src\\app\\create-order\\create-order.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrderService } from '../services/order.service';\nimport { ProductService } from '../services/product.service';\nimport { Product } from '../models/product.model';\nimport { Order, OrderItem } from '../models/order.model';\n\n@Component({\n  selector: 'app-create-order',\n  templateUrl: './create-order.component.html',\n  styleUrls: ['./create-order.component.css']\n})\nexport class CreateOrderComponent implements OnInit {\n  orderForm: FormGroup;\n  products: Product[] = [];\n  isEditMode: boolean = false;\n  orderId: number | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService,\n    private productService: ProductService\n  ) {\n    this.orderForm = this.fb.group({\n      date: ['', Validators.required],\n      status: ['', Validators.required],\n      delivery_address: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      user_id: ['', Validators.required],\n      orderDetails: this.fb.array([])\n    });\n  }\n\n  ngOnInit() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n\n    this.route.paramMap.subscribe(params => {\n      this.orderId = Number(params.get('id'));\n      this.isEditMode = !!this.orderId;\n\n      if (this.isEditMode && this.orderId) {\n        this.loadOrder(this.orderId);\n      }\n    });\n  }\n\n  get orderDetails() {\n    return this.orderForm.get('orderDetails') as FormArray;\n  }\n\n  addProduct() {\n    const orderDetailGroup = this.fb.group({\n      product_id: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.orderDetails.push(orderDetailGroup);\n  }\n\n  removeProduct(index: number) {\n    this.orderDetails.removeAt(index);\n  }\n\n  getProduct(productId: number): Product | undefined {\n    const product = this.products.find(product => product.id === productId);\n    console.log(`Product ID: ${productId}, Product:`, product); // Debugging line\n    return product;\n  }\n\n  getProductById(productId: number): Product | undefined {\n    return this.products.find(product => product.id === productId);    \n  }\n\n  getProductName(productId: number): string {\n    const product = this.getProduct(productId);\n    return product ? product.name : 'Producto no encontrado';\n  }\n\n  getProductPrice(productId: number): number {\n    const product = this.getProduct(productId);\n    return product ? product.price : 0;\n  }\n\n  loadOrder(orderId: number) {\n    this.orderService.getOrderById(orderId).subscribe(order => {\n      this.orderForm.patchValue({\n        date: order.date,\n        status: order.status,\n        delivery_address: order.deliveryAddress,\n        payment_method: order.paymentMethod,\n        user_id: order.userId,\n      });\n\n      order.orderDetails.forEach(detail => {\n        this.orderDetails.push(this.fb.group({\n          product_id: [detail.productId, Validators.required],\n          quantity: [detail.quantity, [Validators.required, Validators.min(1)]]\n        }));\n      });\n    });\n  }\n\n  onSubmit() {\n    if (this.orderForm.valid) {\n      const orderData = {\n        order: {\n          date: this.orderForm.value.date,\n          status: this.orderForm.value.status,\n          deliveryAddress: this.orderForm.value.delivery_address,\n          paymentMethod: this.orderForm.value.payment_method,\n          userId: this.orderForm.value.user_id\n        },\n        orderDetails: this.orderForm.value.orderDetails.map((detail: any) => ({\n          productId: detail.product_id,\n          quantity: detail.quantity\n        }))\n      };\n\n      if (this.isEditMode && this.orderId) {\n        this.orderService.updateOrder(this.orderId, orderData).subscribe(response => {\n          console.log('Order updated', response);\n          this.router.navigate(['/orders']);\n        });\n      } else {\n        this.orderService.createOrder(orderData).subscribe(response => {\n          console.log('Order created', response);\n          this.router.navigate(['/orders']);\n        });\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}