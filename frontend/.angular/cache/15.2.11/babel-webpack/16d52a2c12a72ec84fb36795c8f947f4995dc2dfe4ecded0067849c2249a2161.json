{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/fondo.service\";\nimport * as i2 from \"../services/cliente.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction BuscarAsociarFondosComponent_div_12_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\")(2, \"input\", 6);\n    i0.ɵɵlistener(\"ngModelChange\", function BuscarAsociarFondosComponent_div_12_div_16_Template_input_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const fondo_r2 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(fondo_r2.selected = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const fondo_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"name\", \"fondo\", fondo_r2.fondoId, \"\");\n    i0.ɵɵproperty(\"ngModel\", fondo_r2.selected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", fondo_r2.nombreFondo, \" - \", fondo_r2.montoSuscrito, \" \");\n  }\n}\nfunction BuscarAsociarFondosComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Datos del Cliente\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"p\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"h3\");\n    i0.ɵɵtext(14, \"Fondos Disponibles para Suscribirse\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"form\", 0);\n    i0.ɵɵlistener(\"ngSubmit\", function BuscarAsociarFondosComponent_div_12_Template_form_ngSubmit_15_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.asociarFondos());\n    });\n    i0.ɵɵtemplate(16, BuscarAsociarFondosComponent_div_12_div_16_Template, 4, 4, \"div\", 5);\n    i0.ɵɵelementStart(17, \"button\", 3);\n    i0.ɵɵtext(18, \"Asociar Fondos Seleccionados\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Nombres: \", ctx_r0.cliente.nombres, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Apellidos: \", ctx_r0.cliente.apellidos, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Email: \", ctx_r0.cliente.email, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Tel\\u00E9fono: \", ctx_r0.cliente.telefono, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Saldo Actual: \", ctx_r0.cliente.saldoActual, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.fondosDisponibles);\n  }\n}\nexport class BuscarAsociarFondosComponent {\n  constructor(fondoService, clienteService) {\n    this.fondoService = fondoService;\n    this.clienteService = clienteService;\n    /* */\n    this.fondosDisponibles = []; // Array para almacenar los fondos disponibles\n    /**/\n    this.numeroIdentificacion = ''; // Asegúrate de inicializar la variable\n  }\n\n  ngOnInit() {\n    this.getFondos(); // Llama al método getFondos() al iniciar el componente\n  }\n\n  getFondos() {\n    this.fondoService.getFondos().subscribe(fondos => {\n      this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n    }, error => {\n      console.error('Error al obtener los fondos:', error);\n      // Manejo de errores, si es necesario\n    });\n  }\n\n  buscarCliente() {\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n      this.cliente = response;\n      //this.obtenerFondosDisponibles();\n    });\n  }\n  /*obtenerFondosDisponibles() {\r\n    this.clienteService.obtenerFondosDisponibles().subscribe(data => {\r\n      this.fondosDisponibles = data.map(fondo => ({ ...fondo, selected: false }));\r\n    });\r\n  }*/\n  /*asociarFondos() {\r\n    const fondosSeleccionados = this.fondosDisponibles.filter(fondo => fondo.selected).map(fondo => ({\r\n      fondoId: fondo.id,\r\n      montoSuscrito: fondo.monto,\r\n      fechaSuscripcion: new Date().toISOString()\r\n    }));\r\n    this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(response => {\r\n      console.log('Fondos asociados', response);\r\n      this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\r\n    });\r\n  }*/\n  /* asociarFondos(): void {\r\n     const fondosSeleccionados = this.fondosDisponibles\r\n       .filter(fondo => fondo.selected)\r\n       .map(fondo => ({\r\n         fondoId: fondo.fondoId, // Accede a fondoId en lugar de id\r\n         montoSuscrito: fondo.montoSuscrito, // Accede a montoSuscrito en lugar de monto\r\n         fechaSuscripcion: new Date().toISOString()\r\n       }));\r\n   \r\n     this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\r\n       response => {\r\n         console.log('Fondos asociados', response);\r\n         this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\r\n       },\r\n       error => {\r\n         console.error('Error al asociar fondos:', error);\r\n         // Manejo de errores, si es necesario\r\n       }\r\n     );\r\n   }*/\n  /*asociarFondos(): void {\r\n    const fondosSeleccionados = this.fondosDisponibles\r\n      .filter(fondo => fondo.selected)\r\n      .map(fondo => ({\r\n        fondoId: fondo.fondoId,\r\n        montoSuscrito: fondo.montoSuscrito,\r\n        fechaSuscripcion: new Date().toISOString()\r\n      }));\r\n        this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\r\n      response => {\r\n        console.log('Fondos asociados:', response);\r\n            // Generar transacción\r\n        const transaccion: Transaccion = {\r\n          tipo: 'Asociación de fondos',\r\n          descripcion: 'Asociación de fondos a cliente',\r\n          monto: fondosSeleccionados.reduce((total, fondo) => total + fondo.montoSuscrito, 0),\r\n          fecha: new Date().toISOString()\r\n        };\r\n            this.clienteService.realizarTransaccion(this.cliente.id, transaccion).subscribe(\r\n          response => {\r\n            console.log('Transacción realizada:', response);\r\n            this.buscarCliente(); // Recargar los datos del cliente después de asociar fondos y transacción\r\n          },\r\n          error => {\r\n            console.error('Error al realizar transacción:', error);\r\n            // Manejo de errores, si es necesario\r\n          }\r\n        );\r\n          },\r\n      error => {\r\n        console.error('Error al asociar fondos:', error);\r\n        // Manejo de errores, si es necesario\r\n      }\r\n    );\r\n  }*/\n  asociarFondos() {\n    const fondosSeleccionados = this.fondosDisponibles.filter(fondo => fondo.selected).map(fondo => ({\n      fondoId: fondo.fondoId,\n      montoSuscrito: fondo.montoSuscrito,\n      fechaSuscripcion: new Date().toISOString()\n    }));\n    this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(response => {\n      console.log('Fondos asociados:', response);\n      // Generar transacción de tipo \"apertura\"\n      const transaccion = {\n        tipo: 'apertura',\n        descripcion: 'Apertura de fondos',\n        monto: fondosSeleccionados.reduce((total, fondo) => total - fondo.montoSuscrito, 0),\n        fecha: new Date().toISOString()\n      };\n      // Llamar al servicio para realizar la transacción\n      this.clienteService.realizarTransaccion(this.cliente.id, transaccion).subscribe(response => {\n        console.log('Transacción realizada:', response);\n        // Actualizar el cliente después de la transacción\n        this.clienteService.getCliente(this.cliente.id).subscribe(clienteActualizado => {\n          this.cliente = clienteActualizado;\n          console.log('Cliente actualizado:', this.cliente);\n        }, error => {\n          console.error('Error al obtener el cliente actualizado:', error);\n          // Manejo de errores, si es necesario\n        });\n      }, error => {\n        console.error('Error al realizar transacción:', error);\n        // Manejo de errores, si es necesario\n      });\n    }, error => {\n      console.error('Error al asociar fondos:', error);\n      // Manejo de errores, si es necesario\n    });\n  }\n  static #_ = this.ɵfac = function BuscarAsociarFondosComponent_Factory(t) {\n    return new (t || BuscarAsociarFondosComponent)(i0.ɵɵdirectiveInject(i1.FondoService), i0.ɵɵdirectiveInject(i2.ClienteService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BuscarAsociarFondosComponent,\n    selectors: [[\"app-buscar-asociar-fondos\"]],\n    decls: 13,\n    vars: 2,\n    consts: [[3, \"ngSubmit\"], [\"for\", \"numeroIdentificacion\"], [\"id\", \"numeroIdentificacion\", \"name\", \"numeroIdentificacion\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"checkbox\", 3, \"ngModel\", \"name\", \"ngModelChange\"]],\n    template: function BuscarAsociarFondosComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"buscar-asociar-fondos works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"p\");\n        i0.ɵɵtext(3, \"buscar-asociar-fondos works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"h2\");\n        i0.ɵɵtext(5, \"Buscar Cliente y Asociar Fondos\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function BuscarAsociarFondosComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.buscarCliente();\n        });\n        i0.ɵɵelementStart(7, \"label\", 1);\n        i0.ɵɵtext(8, \"N\\u00FAmero de Identificaci\\u00F3n:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function BuscarAsociarFondosComponent_Template_input_ngModelChange_9_listener($event) {\n          return ctx.numeroIdentificacion = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\", 3);\n        i0.ɵɵtext(11, \"Buscar\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(12, BuscarAsociarFondosComponent_div_12_Template, 19, 6, \"div\", 4);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngModel\", ctx.numeroIdentificacion);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.cliente);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.CheckboxControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","BuscarAsociarFondosComponent","constructor","fondoService","clienteService","ngOnInit","getFondos","subscribe","fondos","fondosDisponibles","error","console","buscarCliente","buscarClientePorNumeroIdentificacion","numeroIdentificacion","response","cliente","asociarFondos","fondosSeleccionados","filter","fondo","selected","map","fondoId","montoSuscrito","fechaSuscripcion","Date","toISOString","id","log","transaccion","tipo","descripcion","monto","reduce","total","fecha","realizarTransaccion","getCliente","clienteActualizado","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\fondo\\frontend\\src\\app\\buscar-asociar-fondos\\buscar-asociar-fondos.component.html","C:\\fondo\\frontend\\src\\app\\buscar-asociar-fondos\\buscar-asociar-fondos.component.ts"],"sourcesContent":["<p>buscar-asociar-fondos works!</p>\n<p>buscar-asociar-fondos works!</p>\n<h2>Buscar Cliente y Asociar Fondos</h2>\n<form (ngSubmit)=\"buscarCliente()\">\n  <label for=\"numeroIdentificacion\">Número de Identificación:</label>\n  <input id=\"numeroIdentificacion\" [(ngModel)]=\"numeroIdentificacion\" name=\"numeroIdentificacion\" required>\n  <button type=\"submit\">Buscar</button>\n</form>\n\n<div *ngIf=\"cliente\">\n  <h3>Datos del Cliente</h3>\n  <p>Nombres: {{cliente.nombres}}</p>\n  <p>Apellidos: {{cliente.apellidos}}</p>\n  <p>Email: {{cliente.email}}</p>\n  <p>Teléfono: {{cliente.telefono}}</p>\n  <p>Saldo Actual: {{cliente.saldoActual}}</p>\n\n  <h3>Fondos Disponibles para Suscribirse</h3>\n<form (ngSubmit)=\"asociarFondos()\">\n  <div *ngFor=\"let fondo of fondosDisponibles\">\n    <label>\n      <input type=\"checkbox\" [(ngModel)]=\"fondo.selected\" name=\"fondo{{fondo.fondoId}}\">\n      {{ fondo.nombreFondo }} - {{ fondo.montoSuscrito }}\n    </label>\n  </div>\n  <button type=\"submit\">Asociar Fondos Seleccionados</button>\n</form>\n\n</div>\n\n\n","import { Component } from '@angular/core';\nimport { Fondo } from '../models/fondo.model'; // Asegúrate de importar la interfaz Fondo\nimport { ClienteService } from '../services/cliente.service';\nimport { FondoService } from '../services/fondo.service';\n\nimport { Cliente } from '../models/cliente';\nimport { Transaccion } from '../models/transaccion.model';\n\n\n@Component({\n  selector: 'app-buscar-asociar-fondos',\n  templateUrl: './buscar-asociar-fondos.component.html',\n  styleUrls: ['./buscar-asociar-fondos.component.css']\n})\nexport class BuscarAsociarFondosComponent {\n/* */\n\nfondosDisponibles: Fondo[] = []; // Array para almacenar los fondos disponibles\n\nconstructor(\n  private fondoService: FondoService,\n  private clienteService: ClienteService\n) { }\n\n  ngOnInit(): void {\n    this.getFondos(); // Llama al método getFondos() al iniciar el componente\n  }\n\n  getFondos(): void {\n    this.fondoService.getFondos().subscribe(\n      fondos => {\n        this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n      },\n      error => {\n        console.error('Error al obtener los fondos:', error);\n        // Manejo de errores, si es necesario\n      }\n    );\n  }\n\n\n\n  /**/\n  numeroIdentificacion: string = ''; // Asegúrate de inicializar la variable\n\n  cliente: any;\n  \n\n  buscarCliente() {\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n      this.cliente = response;\n      //this.obtenerFondosDisponibles();\n    });\n  }\n\n  /*obtenerFondosDisponibles() {\n    this.clienteService.obtenerFondosDisponibles().subscribe(data => {\n      this.fondosDisponibles = data.map(fondo => ({ ...fondo, selected: false }));\n    });\n  }*/\n\n  /*asociarFondos() {\n    const fondosSeleccionados = this.fondosDisponibles.filter(fondo => fondo.selected).map(fondo => ({\n      fondoId: fondo.id,\n      montoSuscrito: fondo.monto,\n      fechaSuscripcion: new Date().toISOString()\n    }));\n    this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(response => {\n      console.log('Fondos asociados', response);\n      this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\n    });\n  }*/\n\n   /* asociarFondos(): void {\n      const fondosSeleccionados = this.fondosDisponibles\n        .filter(fondo => fondo.selected)\n        .map(fondo => ({\n          fondoId: fondo.fondoId, // Accede a fondoId en lugar de id\n          montoSuscrito: fondo.montoSuscrito, // Accede a montoSuscrito en lugar de monto\n          fechaSuscripcion: new Date().toISOString()\n        }));\n    \n      this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n        response => {\n          console.log('Fondos asociados', response);\n          this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\n        },\n        error => {\n          console.error('Error al asociar fondos:', error);\n          // Manejo de errores, si es necesario\n        }\n      );\n    }*/\n\n      /*asociarFondos(): void {\n        const fondosSeleccionados = this.fondosDisponibles\n          .filter(fondo => fondo.selected)\n          .map(fondo => ({\n            fondoId: fondo.fondoId,\n            montoSuscrito: fondo.montoSuscrito,\n            fechaSuscripcion: new Date().toISOString()\n          }));\n    \n        this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n          response => {\n            console.log('Fondos asociados:', response);\n    \n            // Generar transacción\n            const transaccion: Transaccion = {\n              tipo: 'Asociación de fondos',\n              descripcion: 'Asociación de fondos a cliente',\n              monto: fondosSeleccionados.reduce((total, fondo) => total + fondo.montoSuscrito, 0),\n              fecha: new Date().toISOString()\n            };\n    \n            this.clienteService.realizarTransaccion(this.cliente.id, transaccion).subscribe(\n              response => {\n                console.log('Transacción realizada:', response);\n                this.buscarCliente(); // Recargar los datos del cliente después de asociar fondos y transacción\n              },\n              error => {\n                console.error('Error al realizar transacción:', error);\n                // Manejo de errores, si es necesario\n              }\n            );\n    \n          },\n          error => {\n            console.error('Error al asociar fondos:', error);\n            // Manejo de errores, si es necesario\n          }\n        );\n      }*/\n\n\n        asociarFondos(): void {\n          const fondosSeleccionados = this.fondosDisponibles\n            .filter(fondo => fondo.selected)\n            .map(fondo => ({\n              fondoId: fondo.fondoId,\n              montoSuscrito: fondo.montoSuscrito,\n              fechaSuscripcion: new Date().toISOString()\n            }));\n      \n          this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n            response => {\n              console.log('Fondos asociados:', response);\n      \n              // Generar transacción de tipo \"apertura\"\n              const transaccion: Transaccion = {\n                tipo: 'apertura',\n                descripcion: 'Apertura de fondos',\n                monto: fondosSeleccionados.reduce((total, fondo) => total - fondo.montoSuscrito, 0),\n                fecha: new Date().toISOString()\n              };\n      \n              // Llamar al servicio para realizar la transacción\n              this.clienteService.realizarTransaccion(this.cliente.id, transaccion).subscribe(\n                response => {\n                  console.log('Transacción realizada:', response);\n      \n                  // Actualizar el cliente después de la transacción\n                  this.clienteService.getCliente(this.cliente.id).subscribe(\n                    clienteActualizado => {\n                      this.cliente = clienteActualizado;\n                      console.log('Cliente actualizado:', this.cliente);\n                    },\n                    error => {\n                      console.error('Error al obtener el cliente actualizado:', error);\n                      // Manejo de errores, si es necesario\n                    }\n                  );\n      \n                },\n                error => {\n                  console.error('Error al realizar transacción:', error);\n                  // Manejo de errores, si es necesario\n                }\n              );\n      \n            },\n            error => {\n              console.error('Error al asociar fondos:', error);\n              // Manejo de errores, si es necesario\n            }\n          );\n        }\n    \n    \n  \n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}