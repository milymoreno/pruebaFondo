{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet OrdersComponent = class OrdersComponent {\n  constructor(orderService, productService) {\n    this.orderService = orderService;\n    this.productService = productService;\n    this.orders = [];\n    this.newOrder = {\n      userId: '',\n      deliveryAddresss: '',\n      paymentMethod: '',\n      total: 0,\n      date: new Date(),\n      status: '',\n      orderDetails: []\n    }; // Define una nueva orden\n    this.selectedProducts = {}; // Define un objeto para almacenar los productos seleccionados\n    this.products = []; // Define un arreglo de productos\n  }\n\n  ngOnInit() {\n    this.loadOrders();\n    this.loadProducts();\n  }\n  loadOrders() {\n    this.orderService.getOrders().subscribe(data => {\n      this.orders = data;\n    });\n  }\n  loadProducts() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n  addOrder() {\n    this.newOrder.orderDetails = Object.keys(this.selectedProducts).filter(productId => this.selectedProducts[parseInt(productId, 10)]).map(productId => ({\n      productId: parseInt(productId, 10),\n      quantity: 1,\n      price: this.products.find(product => product._id === parseInt(productId, 10)).price\n    }));\n    this.orderService.createOrder(this.newOrder).subscribe(() => {\n      this.loadOrders();\n      this.newOrder = {\n        userId: '',\n        deliveryAddresss: '',\n        status: '',\n        paymentMethod: '',\n        total: 0,\n        orderDetails: []\n      };\n      this.selectedProducts = {};\n    });\n  }\n  updateOrder(id) {\n    this.newOrder.total = this.calculateTotal(this.newOrder.orderDetails);\n    this.orderService.updateOrder(id, this.newOrder).subscribe(() => {\n      this.loadOrders();\n    });\n  }\n  deleteOrder(id) {\n    this.orderService.deleteOrder(id).subscribe(() => {\n      this.loadOrders();\n    });\n  }\n  editOrder(order) {\n    this.newOrder = {\n      ...order\n    };\n  }\n  calculateTotal(items) {\n    return items.reduce((total, item) => total + item.price * item.quantity, 0);\n  }\n};\nOrdersComponent = __decorate([Component({\n  selector: 'app-orders',\n  templateUrl: './orders.component.html',\n  styleUrls: ['./orders.component.css']\n}), Component({\n  selector: 'app-orders',\n  templateUrl: './orders.component.html',\n  styleUrls: ['./orders.component.css']\n})], OrdersComponent);\nexport { OrdersComponent };","map":{"version":3,"mappings":"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","names":["Component","OrdersComponent","constructor","orderService","productService","userId","deliveryAddresss","paymentMethod","total","date","Date","status","orderDetails","ngOnInit","loadOrders","loadProducts","getOrders","subscribe","data","orders","getProducts","products","addOrder","newOrder","Object","keys","selectedProducts","filter","productId","parseInt","map","quantity","price","find","product","_id","createOrder","updateOrder","id","calculateTotal","deleteOrder","editOrder","order","items","reduce","item","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\app_angular\\ecommerce-app\\src\\app\\orders\\orders.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ProductService } from '../services/product.service'; // Importa el servicio de productos\nimport { OrderService } from '../services/order.service'; // Importa el servicio de órdenes\nimport { Product } from '../models/product.model'; // Importa el modelo de productos\nimport { Order, OrderItem } from '../models/order.model'; // Importa el modelo de órdenes\n\n@Component({\n  selector: 'app-orders',\n  templateUrl: './orders.component.html',\n  styleUrls: ['./orders.component.css']\n})\n\n@Component({\n  selector: 'app-orders',\n  templateUrl: './orders.component.html',\n  styleUrls: ['./orders.component.css']\n})\nexport class OrdersComponent implements OnInit {\n  orders: Order[] = [];\n  newOrder: Order = { userId: '', deliveryAddresss: '', paymentMethod: '', total: 0, date: new Date(), status: '', orderDetails: [] }; // Define una nueva orden\n  selectedProducts: { [productId: number]: boolean } = {}; // Define un objeto para almacenar los productos seleccionados\n\n  products: Product[] = []; // Define un arreglo de productos\n\n  constructor(private orderService: OrderService, private productService: ProductService) {}\n\n  ngOnInit(): void {\n    this.loadOrders();\n    this.loadProducts();\n  }\n\n  loadOrders(): void {\n    this.orderService.getOrders().subscribe(data => {\n      this.orders = data;\n    });\n  }\n\n  loadProducts(): void {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n\n  addOrder(): void {\n    this.newOrder.orderDetails = Object.keys(this.selectedProducts)\n      .filter((productId: string) => this.selectedProducts[parseInt(productId, 10)])\n      .map((productId: string) => ({\n        productId: parseInt(productId, 10),\n        quantity: 1,\n        price: this.products.find(product => product._id === parseInt(productId, 10))!.price\n      }));\n    \n    this.orderService.createOrder(this.newOrder).subscribe(() => {\n      this.loadOrders();\n      this.newOrder = { userId: '', deliveryAddresss: '', status: '', paymentMethod: '', total: 0, orderDetails: [] };\n      this.selectedProducts = {};\n    });\n  }\n  \n\n  updateOrder(id: number): void {\n    this.newOrder.total = this.calculateTotal(this.newOrder.orderDetails);\n    this.orderService.updateOrder(id, this.newOrder).subscribe(() => {\n      this.loadOrders();\n    });\n  }\n\n  deleteOrder(id: number): void {\n    this.orderService.deleteOrder(id).subscribe(() => {\n      this.loadOrders();\n    });\n  }\n\n  editOrder(order: Order): void {\n    this.newOrder = { ...order };\n  }\n\n  calculateTotal(items: OrderItem[]): number {\n    return items.reduce((total, item) => total + item.price * item.quantity, 0);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}