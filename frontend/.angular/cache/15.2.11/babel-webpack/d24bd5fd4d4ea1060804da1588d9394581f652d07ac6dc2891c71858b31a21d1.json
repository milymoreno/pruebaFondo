{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/order.service\";\nimport * as i3 from \"../services/product.service\";\nexport class CreateOrderComponent {\n  constructor(fb, orderService, productService) {\n    this.fb = fb;\n    this.orderService = orderService;\n    this.productService = productService;\n    this.products = [];\n    this.orderForm = this.fb.group({\n      date: ['', Validators.required],\n      status: ['', Validators.required],\n      delivery_address: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      user_id: ['', Validators.required],\n      orderDetails: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n  get orderDetails() {\n    return this.orderForm.get('orderDetails');\n  }\n  addProduct() {\n    const orderDetailGroup = this.fb.group({\n      product_id: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.orderDetails.push(orderDetailGroup);\n  }\n  removeProduct(index) {\n    this.orderDetails.removeAt(index);\n  }\n  getProduct(productId) {\n    return this.products.find(product => product.id === productId);\n  }\n  onSubmit() {\n    if (this.orderForm.valid) {\n      this.orderService.createOrder(this.orderForm.value).subscribe(response => {\n        console.log('Order created', response);\n      });\n    }\n  }\n  static #_ = this.ɵfac = function CreateOrderComponent_Factory(t) {\n    return new (t || CreateOrderComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.OrderService), i0.ɵɵdirectiveInject(i3.ProductService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateOrderComponent,\n    selectors: [[\"app-create-order\"]],\n    decls: 0,\n    vars: 0,\n    template: function CreateOrderComponent_Template(rf, ctx) {},\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AAEA,SAA4CA,UAAU,QAAQ,gBAAgB;;;;;AAU9E,OAAM,MAAOC,oBAAoB;EAI/BC,YACUC,EAAe,EACfC,YAA0B,EAC1BC,cAA8B;IAF9B,OAAE,GAAFF,EAAE;IACF,iBAAY,GAAZC,YAAY;IACZ,mBAAc,GAAdC,cAAc;IALxB,aAAQ,GAAc,EAAE;IAOtB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC7BC,IAAI,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,QAAQ,CAAC;MAC/BC,MAAM,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ,CAAC;MACjCE,gBAAgB,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACS,QAAQ,CAAC;MAC3CG,cAAc,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACS,QAAQ,CAAC;MACzCI,OAAO,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACS,QAAQ,CAAC;MAClCK,YAAY,EAAE,IAAI,CAACX,EAAE,CAACY,KAAK,CAAC,EAAE;KAC/B,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,CAACX,cAAc,CAACY,WAAW,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MACjD,IAAI,CAACC,QAAQ,GAAGD,IAAI;IACtB,CAAC,CAAC;EACJ;EAEA,IAAIL,YAAY;IACd,OAAO,IAAI,CAACR,SAAS,CAACe,GAAG,CAAC,cAAc,CAAc;EACxD;EAEAC,UAAU;IACR,MAAMC,gBAAgB,GAAG,IAAI,CAACpB,EAAE,CAACI,KAAK,CAAC;MACrCiB,UAAU,EAAE,CAAC,EAAE,EAAExB,UAAU,CAACS,QAAQ,CAAC;MACrCgB,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACzB,UAAU,CAACS,QAAQ,EAAET,UAAU,CAAC0B,GAAG,CAAC,CAAC,CAAC,CAAC;KACxD,CAAC;IACF,IAAI,CAACZ,YAAY,CAACa,IAAI,CAACJ,gBAAgB,CAAC;EAC1C;EAEAK,aAAa,CAACC,KAAa;IACzB,IAAI,CAACf,YAAY,CAACgB,QAAQ,CAACD,KAAK,CAAC;EACnC;EAEAE,UAAU,CAACC,SAAiB;IAC1B,OAAO,IAAI,CAACZ,QAAQ,CAACa,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKH,SAAS,CAAC;EAChE;EAEAI,QAAQ;IACN,IAAI,IAAI,CAAC9B,SAAS,CAAC+B,KAAK,EAAE;MACxB,IAAI,CAACjC,YAAY,CAACkC,WAAW,CAAC,IAAI,CAAChC,SAAS,CAACiC,KAAK,CAAC,CAACrB,SAAS,CAACsB,QAAQ,IAAG;QACvEC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,QAAQ,CAAC;MACxC,CAAC,CAAC;;EAEN;EAAC;qBAnDUvC,oBAAoB;EAAA;EAAA;UAApBA,oBAAoB;IAAA0C;IAAAC;IAAAC;IAAAC;IAAAC;EAAA","names":["Validators","CreateOrderComponent","constructor","fb","orderService","productService","orderForm","group","date","required","status","delivery_address","payment_method","user_id","orderDetails","array","ngOnInit","getProducts","subscribe","data","products","get","addProduct","orderDetailGroup","product_id","quantity","min","push","removeProduct","index","removeAt","getProduct","productId","find","product","id","onSubmit","valid","createOrder","value","response","console","log","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\app_angular\\ecommerce-app\\src\\app\\create-order\\create-order.component.ts"],"sourcesContent":["// src/app/create-order/create-order.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { OrderService } from '../services/order.service';\nimport { ProductService } from '../services/product.service';\nimport { Product } from '../models/product.model';\n\n@Component({\n  selector: 'app-create-order',\n  templateUrl: './create-order.component.html',\n  styleUrls: ['./create-order.component.css']\n})\nexport class CreateOrderComponent implements OnInit {\n  orderForm: FormGroup;\n  products: Product[] = [];\n\n  constructor(\n    private fb: FormBuilder,\n    private orderService: OrderService,\n    private productService: ProductService\n  ) {\n    this.orderForm = this.fb.group({\n      date: ['', Validators.required],\n      status: ['', Validators.required],\n      delivery_address: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      user_id: ['', Validators.required],\n      orderDetails: this.fb.array([])\n    });\n  }\n\n  ngOnInit() {\n    this.productService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n\n  get orderDetails() {\n    return this.orderForm.get('orderDetails') as FormArray;\n  }\n\n  addProduct() {\n    const orderDetailGroup = this.fb.group({\n      product_id: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.orderDetails.push(orderDetailGroup);\n  }\n\n  removeProduct(index: number) {\n    this.orderDetails.removeAt(index);\n  }\n\n  getProduct(productId: number): Product | undefined {\n    return this.products.find(product => product.id === productId);\n  }\n\n  onSubmit() {\n    if (this.orderForm.valid) {\n      this.orderService.createOrder(this.orderForm.value).subscribe(response => {\n        console.log('Order created', response);\n      });\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}